[{"/Users/jacob/Web/django-ecommerce/backend/frontend/src/index.js":"1","/Users/jacob/Web/django-ecommerce/backend/frontend/src/App.js":"2","/Users/jacob/Web/django-ecommerce/backend/frontend/src/reportWebVitals.js":"3","/Users/jacob/Web/django-ecommerce/backend/frontend/src/reduxState/store.js":"4","/Users/jacob/Web/django-ecommerce/backend/frontend/src/reduxState/reducers/eventsReducers.js":"5","/Users/jacob/Web/django-ecommerce/backend/frontend/src/components/Header.js":"6","/Users/jacob/Web/django-ecommerce/backend/frontend/src/components/Footer.js":"7","/Users/jacob/Web/django-ecommerce/backend/frontend/src/views/LoginView.js":"8","/Users/jacob/Web/django-ecommerce/backend/frontend/src/views/ShippingView.js":"9","/Users/jacob/Web/django-ecommerce/backend/frontend/src/views/CartView.js":"10","/Users/jacob/Web/django-ecommerce/backend/frontend/src/views/ProfileView.js":"11","/Users/jacob/Web/django-ecommerce/backend/frontend/src/views/HomeView.js":"12","/Users/jacob/Web/django-ecommerce/backend/frontend/src/views/RegisterView.js":"13","/Users/jacob/Web/django-ecommerce/backend/frontend/src/views/PaymentView.js":"14","/Users/jacob/Web/django-ecommerce/backend/frontend/src/views/OrderView.js":"15","/Users/jacob/Web/django-ecommerce/backend/frontend/src/views/PlaceOrderView.js":"16","/Users/jacob/Web/django-ecommerce/backend/frontend/src/views/ProductView.js":"17","/Users/jacob/Web/django-ecommerce/backend/frontend/src/reduxState/reducers/cartReducers.js":"18","/Users/jacob/Web/django-ecommerce/backend/frontend/src/reduxState/reducers/orderReducers.js":"19","/Users/jacob/Web/django-ecommerce/backend/frontend/src/reduxState/reducers/productReducers.js":"20","/Users/jacob/Web/django-ecommerce/backend/frontend/src/reduxState/reducers/userReducers.js":"21","/Users/jacob/Web/django-ecommerce/backend/frontend/src/components/Loader.js":"22","/Users/jacob/Web/django-ecommerce/backend/frontend/src/components/Message.js":"23","/Users/jacob/Web/django-ecommerce/backend/frontend/src/components/FormContainer.js":"24","/Users/jacob/Web/django-ecommerce/backend/frontend/src/components/CheckoutProgress.js":"25","/Users/jacob/Web/django-ecommerce/backend/frontend/src/reduxState/actions/userActions.js":"26","/Users/jacob/Web/django-ecommerce/backend/frontend/src/reduxState/actions/cartActions.js":"27","/Users/jacob/Web/django-ecommerce/backend/frontend/src/reduxState/actions/orderActions.js":"28","/Users/jacob/Web/django-ecommerce/backend/frontend/src/reduxState/actions/productActions.js":"29","/Users/jacob/Web/django-ecommerce/backend/frontend/src/reduxState/constants/userConstants.js":"30","/Users/jacob/Web/django-ecommerce/backend/frontend/src/reduxState/constants/orderConstants.js":"31","/Users/jacob/Web/django-ecommerce/backend/frontend/src/components/products/Product.js":"32","/Users/jacob/Web/django-ecommerce/backend/frontend/src/components/products/Rating.js":"33","/Users/jacob/Web/django-ecommerce/backend/frontend/src/reduxState/constants/productConstants.js":"34","/Users/jacob/Web/django-ecommerce/backend/frontend/src/reduxState/constants/cartConstants.js":"35","/Users/jacob/Web/django-ecommerce/backend/frontend/src/reduxState/constants/eventsConstants.js":"36","/Users/jacob/Web/django-ecommerce/backend/frontend/src/views/EventView.js":"37","/Users/jacob/Web/django-ecommerce/backend/frontend/src/reduxState/actions/eventActions.js":"38"},{"size":647,"mtime":1645012411835,"results":"39","hashOfConfig":"40"},{"size":1803,"mtime":1645336930563,"results":"41","hashOfConfig":"40"},{"size":362,"mtime":1644960258335,"results":"42","hashOfConfig":"40"},{"size":2573,"mtime":1645333048798,"results":"43","hashOfConfig":"40"},{"size":2380,"mtime":1645331842635,"results":"44","hashOfConfig":"40"},{"size":2604,"mtime":1645333397371,"results":"45","hashOfConfig":"40"},{"size":364,"mtime":1644962431433,"results":"46","hashOfConfig":"40"},{"size":2485,"mtime":1645107702216,"results":"47","hashOfConfig":"40"},{"size":3331,"mtime":1645128051396,"results":"48","hashOfConfig":"40"},{"size":5797,"mtime":1645123215428,"results":"49","hashOfConfig":"40"},{"size":7638,"mtime":1645246489843,"results":"50","hashOfConfig":"40"},{"size":1377,"mtime":1645025910053,"results":"51","hashOfConfig":"40"},{"size":3963,"mtime":1645113986165,"results":"52","hashOfConfig":"40"},{"size":1936,"mtime":1645130348173,"results":"53","hashOfConfig":"40"},{"size":7825,"mtime":1645240364131,"results":"54","hashOfConfig":"40"},{"size":7217,"mtime":1645155309268,"results":"55","hashOfConfig":"40"},{"size":7072,"mtime":1645307439506,"results":"56","hashOfConfig":"40"},{"size":1939,"mtime":1645155520899,"results":"57","hashOfConfig":"40"},{"size":2170,"mtime":1645246008769,"results":"58","hashOfConfig":"40"},{"size":1096,"mtime":1645018470933,"results":"59","hashOfConfig":"40"},{"size":2319,"mtime":1645122311242,"results":"60","hashOfConfig":"40"},{"size":381,"mtime":1645015105457,"results":"61","hashOfConfig":"40"},{"size":227,"mtime":1645015655656,"results":"62","hashOfConfig":"40"},{"size":361,"mtime":1645101707199,"results":"63","hashOfConfig":"40"},{"size":1454,"mtime":1645128841478,"results":"64","hashOfConfig":"40"},{"size":5288,"mtime":1645241546090,"results":"65","hashOfConfig":"40"},{"size":1847,"mtime":1645130055617,"results":"66","hashOfConfig":"40"},{"size":3320,"mtime":1645245376617,"results":"67","hashOfConfig":"40"},{"size":1282,"mtime":1645098838809,"results":"68","hashOfConfig":"40"},{"size":800,"mtime":1645122252482,"results":"69","hashOfConfig":"40"},{"size":583,"mtime":1645241073911,"results":"70","hashOfConfig":"40"},{"size":1016,"mtime":1644967055635,"results":"71","hashOfConfig":"40"},{"size":1913,"mtime":1644965478248,"results":"72","hashOfConfig":"40"},{"size":361,"mtime":1645015815635,"results":"73","hashOfConfig":"40"},{"size":286,"mtime":1645155213065,"results":"74","hashOfConfig":"40"},{"size":787,"mtime":1645314579200,"results":"75","hashOfConfig":"40"},{"size":8615,"mtime":1645314781096,"results":"76","hashOfConfig":"40"},{"size":2902,"mtime":1645331856213,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1gjemt6",{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116"},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127"},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131"},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135"},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"140"},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","suppressedMessages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168"},{"filePath":"169","messages":"170","suppressedMessages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","suppressedMessages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","suppressedMessages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","suppressedMessages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","suppressedMessages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","suppressedMessages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","suppressedMessages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"199"},{"filePath":"200","messages":"201","suppressedMessages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"199"},{"filePath":"204","messages":"205","suppressedMessages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"94"},"/Users/jacob/Web/django-ecommerce/backend/frontend/src/index.js",[],[],"/Users/jacob/Web/django-ecommerce/backend/frontend/src/App.js",[],[],"/Users/jacob/Web/django-ecommerce/backend/frontend/src/reportWebVitals.js",[],[],"/Users/jacob/Web/django-ecommerce/backend/frontend/src/reduxState/store.js",[],[],["208","209"],"/Users/jacob/Web/django-ecommerce/backend/frontend/src/reduxState/reducers/eventsReducers.js",[],[],["210","211"],"/Users/jacob/Web/django-ecommerce/backend/frontend/src/components/Header.js",["212","213"],[],"import React, { useEffect } from 'react'\nimport {Navbar, Nav, Container, NavDropdown} from 'react-bootstrap'\nimport { LinkContainer } from 'react-router-bootstrap'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { logout }from '../reduxState/actions/userActions'\nimport { listEvents } from '../reduxState/actions/eventActions'\n\n// components\nimport Loader from '../components/Loader'\n\nfunction Header() {\n\n  const userLogin = useSelector(state => state.userLogin)\n  const { userData } = userLogin\n\n\n  const dispatch = useDispatch()\n  /* TODO: use events to build a dynamic nav drop down (using array.map) based on listEvents() array */\n  /* having issues with making this work, hard-coded some events in nav drop-down for now */\n  // const eventsState = useSelector(state => state.events)\n  // const { loading, events, error } = eventsState\n\n  useEffect(() => {\n    // dispatch(listEvents())\n  }, [])\n\n  const logoutHandler = () => {\n    dispatch(logout)\n  }\n\n  return (\n    <header>\n      <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" collapseOnSelect>\n        <Container>\n          <LinkContainer to='/'>\n            <Navbar.Brand>Django Ecommerce</Navbar.Brand>\n          </LinkContainer>\n\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"me-auto\">\n\n              <NavDropdown title='Events' id='events'>\n                <LinkContainer to={`event/1`}>\n                  <NavDropdown.Item>Eyes on Dry Eye</NavDropdown.Item>\n                </LinkContainer>\n                <LinkContainer to={`event/2`}>\n                  <NavDropdown.Item>Eyes on Glaucoma</NavDropdown.Item>\n                </LinkContainer>\n              </NavDropdown>\n\n              <LinkContainer to='/cart'>\n                <Nav.Link><i className=\"fas fa-shopping-cart\"></i>Cart</Nav.Link>\n              </LinkContainer>\n\n              { userData ? (\n                  <NavDropdown title={userData.name} id='username'>\n                    <LinkContainer to='/profile'>\n                        <NavDropdown.Item>Profile</NavDropdown.Item>\n                    </LinkContainer>\n\n                    <NavDropdown.Item onClick={logoutHandler}>Logout</NavDropdown.Item>\n                  </NavDropdown>\n              ) : (\n                    <LinkContainer to='/login'>\n                      <Nav.Link><i className=\"fas fa-user\"></i>Login</Nav.Link>\n                    </LinkContainer>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n    </header>\n  )\n}\n\nexport default Header","/Users/jacob/Web/django-ecommerce/backend/frontend/src/components/Footer.js",[],[],"/Users/jacob/Web/django-ecommerce/backend/frontend/src/views/LoginView.js",["214","215"],[],"import React, { useState, useEffect } from 'react'\nimport { Link, useNavigate, useLocation, NavigationType } from 'react-router-dom'\nimport { Form, Button, Row, Col} from 'react-bootstrap'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { login } from '../reduxState/actions/userActions'\n\n// components\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport FormContainer from '../components/FormContainer'\n\nfunction LoginView() {\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    let navigate = useNavigate()\n    const dispatch = useDispatch()\n\n    /* getting userData from redux state */\n    const userLogin = useSelector(state => state.userLogin)\n    const { error, loading, userData } = userLogin\n\n    /* redirect the user if they are already logged in */\n    useEffect(() => {\n        if(userData) {\n            navigate(-1)\n        }\n    }, [navigate, userData])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(login(email, password))\n    }\n\n    return (\n        <FormContainer>\n            <h1>Log In</h1>\n            { error && <Message variant='warning'>{error}</Message> }\n            { loading && <Loader /> }\n            <Form onSubmit={submitHandler}>\n                <Form.Group className='my-4' controlId='email'>\n                    <Form.Label>Email Address</Form.Label>\n                    <Form.Control \n                        type='email' \n                        placeholder='Enter Email' \n                        value={email} \n                        onChange={(e) => setEmail(e.target.value)}\n                    />\n                </Form.Group>\n\n                <Form.Group className='my-4' controlId='password'>\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control \n                        type='password' \n                        placeholder='Enter Password' \n                        value={password} \n                        onChange={(e) => setPassword(e.target.value)}\n                    />\n                </Form.Group>\n\n                <Button type='submit' variant='primary'> Log In </Button>\n            </Form> \n\n            <Row className='py-3'>\n                <Col>\n                    New Customer? \n                    <Link className='px-1' to={'/register'}>Register</Link>\n                </Col>\n\n            </Row>\n        </FormContainer>\n    )\n}\n\nexport default LoginView","/Users/jacob/Web/django-ecommerce/backend/frontend/src/views/ShippingView.js",["216"],[],"import React, { useState, useEffect } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { Form, Button} from 'react-bootstrap'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { saveShippingAddress } from '../reduxState/actions/cartActions'\n\n\n// components\nimport FormContainer from '../components/FormContainer'\nimport CheckoutProgress from '../components/CheckoutProgress'\n\nfunction ShippingView() {\n    let navigate = useNavigate()\n\n    /* geting shippingAddress in cart from Redux State */\n    const cart = useSelector(state => state.cart)\n    const { shippingAddress } = cart\n\n    const dispatch = useDispatch()\n\n    /* preloading state with shippingAddress values, if any */\n    const [address, setAddress] = useState(shippingAddress.address)\n    const [city, setCity] = useState(shippingAddress.city)\n    const [zipCode, setZipCode] = useState(shippingAddress.zipCode)\n    const [country, setCountry] = useState(shippingAddress.country)\n\n\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(saveShippingAddress({ address, city, zipCode, country }))\n        /* redirect user to payment view */\n        navigate('/payment')\n    }\n\n    return (\n        <FormContainer>\n            <CheckoutProgress step1 step2 />\n            <h1>Shipping Information</h1>\n\n            <Form onSubmit={submitHandler}>\n                <Form.Group className='my-4' controlId='address'>\n                    <Form.Label>Street Address</Form.Label>\n                    <Form.Control \n                        required\n                        type='text' \n                        placeholder='Enter Address' \n                        value={address ? address : ''} \n                        onChange={(e) => setAddress(e.target.value)}\n                    />\n                </Form.Group>\n\n                <Form.Group className='my-4' controlId='city'>\n                    <Form.Label>City</Form.Label>\n                    <Form.Control \n                        required\n                        type='text' \n                        placeholder='Enter City' \n                        value={city ? city : ''} \n                        onChange={(e) => setCity(e.target.value)}\n                    />\n                </Form.Group>\n\n                <Form.Group className='my-4' controlId='zipCode'>\n                    <Form.Label>Zip Code</Form.Label>\n                    <Form.Control \n                        required\n                        type='text' \n                        placeholder='Enter Zip Code' \n                        value={zipCode ? zipCode : ''} \n                        onChange={(e) => setZipCode(e.target.value)}\n                    />\n                </Form.Group>\n\n                <Form.Group className='my-4' controlId='country'>\n                    <Form.Label>Country</Form.Label>\n                    <Form.Control \n                        required\n                        type='text' \n                        placeholder='Enter Country' \n                        value={country ? country : ''} \n                        onChange={(e) => setCountry(e.target.value)}\n                    />\n                </Form.Group>\n\n                <Button type='submit' variant='primary'>Next</Button>\n            </Form>\n        </FormContainer>\n\n    )\n}\n\nexport default ShippingView","/Users/jacob/Web/django-ecommerce/backend/frontend/src/views/CartView.js",[],[],"/Users/jacob/Web/django-ecommerce/backend/frontend/src/views/ProfileView.js",["217","218"],[],"import React, { useState, useEffect } from 'react'\nimport { Link, useNavigate} from 'react-router-dom'\nimport { Form, Button, Row, Col, Table} from 'react-bootstrap'\nimport { LinkContainer } from 'react-router-bootstrap'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getUserData, updateUserData  } from '../reduxState/actions/userActions'\nimport { USER_UPDATE_RESET } from '../reduxState/constants/userConstants'\nimport { getMyOrders } from '../reduxState/actions/orderActions'\n\n// components\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\n\nfunction ProfileView() {\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [confirmPassword, setConfirmPassword] = useState('')\n    const [message, setMessage] = useState('')\n    const [messageVariant, setMessageVariant] = useState('')\n\n    let navigate = useNavigate()\n    const dispatch = useDispatch()\n\n    /* getting userData from redux state */\n    const userDataState = useSelector(state => state.userData)\n    const { error, loading, user } = userDataState\n\n    /* getting userData from userLogin in redux state to ensure user is logged in */\n    const userLoginState = useSelector(state => state.userLogin)\n    const { userData } = userLoginState\n\n    /* getting sucess from userUpdate in redux state to ensure that userUpdate is cleared appropriately */\n    const userUpdateState= useSelector(state => state.userUpdate)\n    const { success } = userUpdateState\n\n    /* getting orders from redux state */\n    const ordersState = useSelector(state => state.orders)\n    const { loading:loadingOrders, error:errorOrders, orders } = ordersState\n\n    useEffect(() => {\n        /* redirect the user from this page if they are not logged in */\n        if(!userData) {\n            navigate('/login')\n        } else {\n\n\n\n            if(!user || !user.name || success) {\n                /* ensuring that userUpdate state is cleared after a successful userUpdate submit */\n                dispatch({ type: USER_UPDATE_RESET })\n                /* no user info loaded, so dispatch to get it */\n                dispatch(getUserData('profile'))\n                /* get orders for current user */\n                dispatch(getMyOrders())\n                console.log(orders)\n            } else {\n                /* user info is already loaded, so pre-fill the component state */\n                setName(user.name)\n                setEmail(user.email)\n            }\n        }\n    }, [dispatch, userData, user, success])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        setMessage('')\n\n        if(password !== confirmPassword) {\n            setMessageVariant('warning')\n            setMessage('Passwords do not match.')\n        } else if (password !== '' && password.length < 8){\n            setMessageVariant('warning')\n            setMessage('Password must be at least 8 characters long.')\n        } else {\n            dispatch(updateUserData({\n                'id': user._id,\n                'name': name,\n                'email': email,\n                'password': password\n            }))\n            setMessageVariant('success')\n            setMessage('Your profile was successfully updated.')\n        }\n\n    }\n\n    return (\n        <Row>\n            <Col md={3}>\n                <h2>User Profile</h2>\n                    { message && <Message variant={messageVariant}>{message}</Message>}\n                    { error && <Message variant='warning'>{error}</Message> }\n                    { loading && <Loader /> }\n                    <Form onSubmit={submitHandler}>\n                        <Form.Group className='my-4' controlId='name'>\n                            <Form.Label>Name</Form.Label>\n                            <Form.Control \n                                required\n                                type='name' \n                                placeholder='Enter Name' \n                                value={name} \n                                onChange={(e) => setName(e.target.value)}\n                            />\n                        </Form.Group>\n\n                        <Form.Group className='my-4' controlId='email'>\n                            <Form.Label>Email Address</Form.Label>\n                            <Form.Control \n                                required\n                                type='email' \n                                placeholder='Enter Email' \n                                value={email} \n                                onChange={(e) => setEmail(e.target.value)}\n                            />\n                        </Form.Group>\n\n                        <Form.Group className='my-4' controlId='password'>\n                            <Form.Label>Password</Form.Label>\n                            <Form.Control \n                                type='password' \n                                placeholder='Enter Password' \n                                value={password} \n                                onChange={(e) => setPassword(e.target.value)}\n                            />\n                        </Form.Group>\n\n                        <Form.Group className='my-4' controlId='confirmPassword'>\n                            <Form.Label>Confirm Password</Form.Label>\n                            <Form.Control \n                                type='password' \n                                placeholder='Enter Password Again' \n                                value={confirmPassword} \n                                onChange={(e) => setConfirmPassword(e.target.value)}\n                            />\n                        </Form.Group>\n\n                        <Button type='submit' variant='primary'> Register </Button>\n\n                    </Form>\n\n            </Col>\n\n            <Col md={3}>\n                <h2>My Orders</h2>\n                { loadingOrders ? (\n                    <Loader />\n                ) : errorOrders ? (\n                    <Message variant='warning'>{errorOrders}</Message>\n                ) : (\n                    <Table striped responsive className='table-sm'>\n                        <thead>\n                            <tr>\n                                <th>Id</th>\n                                <th>Date</th>\n                                <th>Total</th>\n                                <th>Paid</th>\n                                <th>Delivered</th>\n                            </tr>\n                        </thead>\n                        \n                        <tbody >\n                                {orders.map(order => (\n                                    <tr key={order._id}>\n                                        <td>{order._id}</td>\n                                        <td>{order.createdAt.substring(0, 10)}</td>\n                                        <td>${order.totalPrice}</td>\n                                        <td>{order.isPaid ? order.paidAt.substring(0, 10) : ( <i className='fas fa-times' style={{ color: 'red' }}></i> )}</td>\n                                        <td>\n                                            <LinkContainer to={`/order/${order._id}`}>\n                                                <Button className='btn-sm'>Details</Button>\n                                            </LinkContainer>\n                                        </td>\n                                    </tr>\n                                ))}\n                        </tbody>\n                    </Table>\n                )}\n            </Col>\n        </Row>\n    )\n}\n\nexport default ProfileView","/Users/jacob/Web/django-ecommerce/backend/frontend/src/views/HomeView.js",["219"],[],"import React, { useState, useEffect } from 'react'\nimport {Row, Col} from 'react-bootstrap'\n// react redux import for global state handling+API calls\nimport { useDispatch, useSelector } from 'react-redux'\nimport { listProducts } from '../reduxState/actions/productActions'\n// components\nimport Product from '../components/products/Product'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\n\nfunction HomeView() {\n\n  const dispatch = useDispatch()\n  /* get productList data from redux state */\n  const productList = useSelector(state => state.productList)\n  const { error, loading, products } = productList\n\n  useEffect(() => {\n      // fetch products from db using fetchProducts API call\n      dispatch(listProducts())\n  }, [dispatch])\n\n  return (\n    <div>\n        <h1>Latest Products</h1>\n        { loading ? <Loader/>\n                  : error ? <Message variant='warning' children={error}/>\n                          : \n                            <Row>\n                                {products.map(product => (\n                                    <Col key={product._id} sm={12} md={6} lg={4} xl={3}>\n                                        <Product product={product} />\n                                    </Col>\n                                ))}\n                            </Row>\n        }\n    </div>\n  )\n}\n\nexport default HomeView","/Users/jacob/Web/django-ecommerce/backend/frontend/src/views/RegisterView.js",[],[],"/Users/jacob/Web/django-ecommerce/backend/frontend/src/views/PaymentView.js",["220","221"],[],"import React, { useState, useEffect } from 'react'\nimport { Navigate, useNavigate } from 'react-router-dom'\nimport { Form, Button, Col} from 'react-bootstrap'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { savePaymentMethod } from '../reduxState/actions/cartActions'\n\n// components\nimport FormContainer from '../components/FormContainer'\nimport CheckoutProgress from '../components/CheckoutProgress'\n\nfunction PaymentView() {\n    let navigate = useNavigate()\n    /* geting shippingAddress in cart from Redux State to ensure it has been submitted */\n    const cart = useSelector(state => state.cart)\n    const { shippingAddress } = cart\n\n    const [paymentMethod, setPaymentMethod] = useState('Credit Card')\n\n    const dispatch = useDispatch()\n\n    if(!shippingAddress.address) {\n        /* redirect the user to shipping if shippingAddress has not been submitted */\n        navigate('/shipping')\n    }\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(savePaymentMethod(paymentMethod))\n        navigate('/placeorder')\n    }\n\n    return (\n        <FormContainer>\n            <CheckoutProgress step1 step2 step3 />\n            <Form onSubmit={submitHandler}>\n                <Form.Group>\n                    <Form.Label as='legend'>Select Method</Form.Label>\n                    <Col>\n                        <Form.Check\n                            type='radio'\n                            label='Credit Card'\n                            id='creditCard'\n                            name='paymentMethod'\n                            checked\n                            onChange={(e) => setPaymentMethod(e.target.value)}\n                        />\n                    </Col>\n                </Form.Group>\n\n                <Button type='submit' variant='primary'>\n                    Next\n                </Button>\n            </Form>\n        </FormContainer>\n    )\n}\n\nexport default PaymentView","/Users/jacob/Web/django-ecommerce/backend/frontend/src/views/OrderView.js",["222","223"],[],"import React, { useState, useEffect } from 'react'\nimport { Link, useParams } from 'react-router-dom'\nimport { Row, Col, ListGroup, Image, Card } from 'react-bootstrap'\n// react redux import for global state handling+API calls\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getOrderDetails } from '../reduxState/actions/orderActions'\n\n// components\nimport Message from '../components/Message'\nimport Loader from '../components/Loader'\n\nfunction OrderView() {\n    const { id } = useParams()\n    /* get orderDetails from global redux state */\n    const orderDetails = useSelector(state => state.orderDetails)\n    const { order, error, loading } = orderDetails\n\n    const dispatch = useDispatch()\n\n    if(!loading && !error) {\n        order.itemsPrice = order.orderItems.reduce((accumulator, item) => accumulator + item.price * item.quantity, 0).toFixed(2)\n\n    }\n\n\n\n    useEffect(() => {\n        if(!order || order._id !== Number(id)) {\n            dispatch(getOrderDetails(id))\n\n        }\n    }, [order, id])\n\n    return loading ? (\n        <Loader/>\n        ) : error ? (\n            <Message variant='warning'>{error}</Message>\n                ) : (\n                    <div>\n                        <h1>Order #{order._id} has been confirmed!</h1>\n                        <Row>\n                            <Col md={8}>\n                                <ListGroup variant='flush'>\n                                    <ListGroup.Item>\n                                        <h2>Shipping</h2>\n                                        <p>\n                                            <u>Name:</u> {order.user.name}\n                                        </p>\n                                        <p>\n                                            <u>Email:</u> <a style={{textDecoration: 'none'}} href={`mailto:{order.user.email}`}>{order.user.email}</a>\n                                        </p>\n                                        <p>\n                                            <u>Shipping Address:</u>{' '}\n                                            {order.shippingAddress.address}, {order.shippingAddress.city}, {order.shippingAddress.zipCode}, {order.shippingAddress.country}\n                                        </p>\n                                        { order.isDelivered ? (\n                                            <Message variant='success'>Order delivered on {order.deliveredAt}.</Message>\n                                        ) : (\n                                            <Message variant='warning'>Order has not been delivered.</Message>\n                                        )}\n                                    </ListGroup.Item>\n\n                                    <ListGroup.Item>\n                                        <h2>Payment</h2>\n                                        <p>\n                                            <u>Payment Method:</u>{' '}\n                                            {order.paymentMethod}\n                                        </p>\n                                        { order.isPaid ? (\n                                            <Message variant='success'>Paid on {order.paidAt}.</Message>\n                                        ) : (\n                                            <Message variant='warning'>Order has not been paid for.</Message>\n                                        )}\n                                    </ListGroup.Item>\n\n                                    <ListGroup.Item>\n                                        <h2>Ordered Items</h2>\n                                        { \n                                            order.orderItems.length === 0 ? \n                                            <Message variant='warning'>\n                                                Order is empty.\n                                            </Message>\n                                            :\n                                            <ListGroup variant='flush'>\n                                                {\n                                                    order.orderItems.map((item, index) => \n                                                        <ListGroup.Item key={index}>\n                                                            <Row>\n                                                                <Col>\n                                                                    <Image src={item.image} alt={item.name} fluid rounded/>\n                                                                </Col>\n                                                                <Col>\n                                                                    <Link to={`/product/${item.product}`}>{item.name}</Link>\n                                                                </Col>\n                                                                <Col md={4}>\n                                                                    {item.quantity} x ${item.price}  \n                                                                </Col>\n                                                                <Col>\n                                                                    ${(item.quantity * item.price).toFixed(2)}               \n                                                                </Col>\n                                                            </Row>\n                                                        </ListGroup.Item>\n                                                    )}\n                                            </ListGroup>\n                                            \n                                        }\n                                    </ListGroup.Item>\n                                </ListGroup>\n                            </Col>\n\n                            <Col md={4}>\n                                <Card>\n                                    <ListGroup variant='flush'>\n                                        <ListGroup.Item>\n                                            <h2>Order Summary</h2>\n                                        </ListGroup.Item>\n\n                                        <ListGroup.Item>\n                                            <Row>\n                                                <Col>Item:</Col>\n                                                <Col>${order.itemsPrice}</Col>\n                                            </Row>\n                                        </ListGroup.Item>\n\n                                        <ListGroup.Item>\n                                            <Row>\n                                                <Col>Shipping:</Col>\n                                                <Col>${order.shippingPrice}</Col>\n                                            </Row>\n                                        </ListGroup.Item>\n\n                                        <ListGroup.Item>\n                                            <Row>\n                                                <Col>Tax:</Col>\n                                                <Col>${order.taxPrice}</Col>\n                                            </Row>\n                                        </ListGroup.Item>\n\n                                        <ListGroup.Item>\n                                            <Row>\n                                                <Col>Total Price:</Col>\n                                                <Col>${order.totalPrice}</Col>\n                                            </Row>\n                                        </ListGroup.Item>\n\n                                    </ListGroup>\n                                </Card>\n                            </Col>\n                        </Row>\n                        \n                    </div>\n    )\n}\n\nexport default OrderView","/Users/jacob/Web/django-ecommerce/backend/frontend/src/views/PlaceOrderView.js",["224","225"],[],"import React, { useState, useEffect } from 'react'\nimport { useNavigate, Link } from 'react-router-dom'\nimport { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap'\n// react redux import for global state handling+API calls\nimport { useDispatch, useSelector } from 'react-redux'\nimport { createOrder } from '../reduxState/actions/orderActions'\nimport { ORDER_CREATE_RESET } from '../reduxState/constants/orderConstants'\n\n// components\nimport Message from '../components/Message'\nimport CheckoutProgress from '../components/CheckoutProgress'\n\nfunction PlaceOrderView() {\n    const orderCreate = useSelector(state => state.orderCreate)\n    const { order, error, success } = orderCreate\n\n    const dispatch = useDispatch()\n    const navigate = useNavigate()\n    /* get cart from redux global state */\n    const cart = useSelector(state => state.cart)\n    /* temporary cart values, only stored in this view */\n    /* TODO: make constants for shiping cost, tax rate */\n    cart.itemsPrice = cart.cartItems.reduce((accumulator, item) => accumulator + item.price * item.quantity, 0).toFixed(2)\n    /* itemsPrice over $100 is free shipping, 10 under */\n    cart.shippingPrice = (cart.itemsPrice > 100 ? 0 : 10).toFixed(2)\n    /* using 6% sales tax */\n    cart.taxPrice = (cart.itemsPrice * 0.06).toFixed(2)\n    cart.totalPrice = (Number(cart.itemsPrice) + Number(cart.shippingPrice) + Number(cart.taxPrice)).toFixed(2)\n\n\n\n    useEffect(() => {\n\n        /* redirect to the payment selection view if payment method is not selected */\n        if(!cart.paymentMethod) {\n            navigate('/payment')\n        }\n\n        if(success) {\n            navigate(`/order/${order._id}`)\n            /* remove order from state */\n            dispatch({ type: ORDER_CREATE_RESET })\n        }\n    }, [success, navigate])\n\n    const placeOrder = () => {\n        dispatch(createOrder({\n            orderItems: cart.cartItems,\n            shippingAddress: cart.shippingAddress,\n            paymentMethod: cart.paymentMethod,\n            itemsPrice: cart.itemsPrice,\n            shippingPrice: cart.shippingPrice,\n            taxPrice: cart.taxPrice,\n            totalPrice: cart.totalPrice,\n        }))\n    }\n    return (\n        <div>\n            <CheckoutProgress step1 step2 step3 step4 />\n            <Row>\n                <Col md={8}>\n                    <ListGroup variant='flush'>\n                        <ListGroup.Item>\n                            <h2>Shipping</h2>\n                            <p>\n                                <u>Shipping Address:</u>{' '}\n                                {cart.shippingAddress.address}, {cart.shippingAddress.city}, {cart.shippingAddress.zipCode}, {cart.shippingAddress.country}\n                            </p>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <h2>Payment</h2>\n                            <p>\n                                <u>Payment Method:</u>{' '}\n                                {cart.paymentMethod}\n                            </p>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <h2>Shopping Cart</h2>\n                            { \n                                cart.cartItems.length === 0 ? \n                                <Message variant='warning'>\n                                    Your cart is empty.\n                                </Message>\n                                :\n                                <ListGroup variant='flush'>\n                                    {\n                                        cart.cartItems.map((item, index) => \n                                            <ListGroup.Item key={index}>\n                                                <Row>\n                                                    <Col>\n                                                        <Image src={item.image} alt={item.name} fluid rounded/>\n                                                    </Col>\n                                                    <Col>\n                                                        <Link to={`/product/${item.product}`}>{item.name}</Link>\n                                                    </Col>\n                                                    <Col md={4}>\n                                                        {item.quantity} x ${item.price}  \n                                                    </Col>\n                                                    <Col>\n                                                         ${(item.quantity * item.price).toFixed(2)}               \n                                                    </Col>\n                                                </Row>\n                                            </ListGroup.Item>\n                                        )}\n                                </ListGroup>\n                                \n                            }\n                        </ListGroup.Item>\n                    </ListGroup>\n                </Col>\n\n                <Col md={4}>\n                    <Card>\n                        <ListGroup variant='flush'>\n                            <ListGroup.Item>\n                                <h2>Order Summary</h2>\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>Item:</Col>\n                                    <Col>${cart.itemsPrice}</Col>\n                                </Row>\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>Shipping:</Col>\n                                    <Col>${cart.shippingPrice}</Col>\n                                </Row>\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>Tax:</Col>\n                                    <Col>${cart.taxPrice}</Col>\n                                </Row>\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>Total Price:</Col>\n                                    <Col>${cart.totalPrice}</Col>\n                                </Row>\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                { error && <Message variant='warning'>{error}</Message>}\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Button type='button' \n                                        className='btn-block'\n                                        disabled={cart.cartItems === 0}\n                                        onClick={placeOrder}\n                                >Place Order</Button>\n                            </ListGroup.Item>\n\n                        </ListGroup>\n                    </Card>\n                </Col>\n            </Row>\n            \n        </div>\n    )\n}\n\nexport default PlaceOrderView","/Users/jacob/Web/django-ecommerce/backend/frontend/src/views/ProductView.js",["226"],[],"import React, { useState, useEffect} from 'react'\nimport { Link, useParams, useNavigate } from 'react-router-dom'\nimport { Row, Col, Image, ListGroup, Button, Card, Form } from 'react-bootstrap'\n// react redux import for global state handling+API calls\nimport { useDispatch, useSelector } from 'react-redux'\nimport { listProductDetails } from '../reduxState/actions/productActions'\n// components\nimport Rating from '../components/products/Rating'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\n\nfunction ProductView({ match }) {\n    const {id} = useParams()\n    let navigate = useNavigate()\n    const [quantity, setQuantity] = useState(1)\n    const dispatch = useDispatch()\n\n    /* get productDetails data from redux state */\n    const productDetails = useSelector(state => state.productDetails)\n    const { loading, error, product } = productDetails\n\n    useEffect(() => {\n\n        dispatch(listProductDetails(id))\n    }, [dispatch, match])\n\n    const addToCart = () => {\n        navigate(`/cart/${id}?quantity=${quantity}`)\n    }\n    return (\n        <div>\n            <Link to='/' className='btn btn-light my-3'>Return</Link>\n            {\n                loading ? <Loader />\n                        : error ? <Message variant='warning' children={error} /> \n                                : (\n                                    <Row>\n                                        <Col md={6} >\n                                            <Image src={product.image} alt={product.name} fluid /> \n                                        </Col>    \n\n                                        <Col md={3}>\n                                            <ListGroup variant=\"flush\">\n                                                <ListGroup.Item>\n                                                    <h3>{product.name}</h3>\n                                                </ListGroup.Item>\n\n                                                <ListGroup.Item>\n                                                    <Rating value={product.rating} text={`${product.numReviews}`} color={'#f8e825'} />\n                                                </ListGroup.Item>\n\n                                                <ListGroup.Item>\n                                                    Price: ${product.price}\n                                                </ListGroup.Item>\n\n                                                <ListGroup.Item>\n                                                    Description: {product.description}\n                                                </ListGroup.Item> \n                                            </ListGroup>\n                                        </Col>\n\n                                        <Col md={3}>\n                                            <Card>\n                                                <ListGroup variant=\"flush\">\n                                                    <ListGroup.Item>\n                                                        <Row>\n                                                            <Col>Price:</Col>\n                                                            <Col>\n                                                                <strong>${product.price}</strong>\n                                                            </Col>\n                                                        </Row>\n                                                    </ListGroup.Item>\n\n                                                    <ListGroup.Item>\n                                                        <Row>\n                                                            <Col>Status:</Col>\n                                                            <Col>\n                                                                {product.countInStock > 0 ? 'In Stock' : 'Out of Stock'}\n                                                            </Col>\n                                                        </Row>\n                                                    </ListGroup.Item>\n\n                                                    {\n                                                        product.countInStock > 0 && (\n                                                            <ListGroup.Item>\n                                                                <Row>\n                                                                    <Col>Quantity</Col>\n                                                                    <Col xs='auto' className='my-1'>\n                                                                        <Form.Control\n                                                                            as=\"select\"\n                                                                            value={quantity}\n                                                                            onChange={(e) => setQuantity(e.target.value)}\n                                                                        >\n                                                                            {\n                                                                                [...Array(product.countInStock).keys()].map((x) =>(\n                                                                                    <option key={x + 1} value={x + 1}>\n                                                                                        {x + 1}\n                                                                                    </option>\n                                                                                ))\n                                                                            }\n\n                                                                        </Form.Control>\n                                                                    </Col>\n                                                                </Row>\n                                                            </ListGroup.Item>\n                                                        )\n                                                    }\n\n                                                    <ListGroup.Item>\n                                                        <Button className=\"btn-block\" \n                                                                onClick={addToCart}\n                                                                disabled={product.countInStock === 0} \n                                                                type=\"button\">\n                                                                    Add to Cart\n                                                        </Button>\n                                                    </ListGroup.Item>\n                                                </ListGroup>\n                                            </Card>\n                                        </Col>\n\n                                    </Row>\n                                )\n\n            }\n                \n        </div>\n    )\n}\n\nexport default ProductView",["227","228"],"/Users/jacob/Web/django-ecommerce/backend/frontend/src/reduxState/reducers/cartReducers.js",[],[],"/Users/jacob/Web/django-ecommerce/backend/frontend/src/reduxState/reducers/orderReducers.js",[],[],"/Users/jacob/Web/django-ecommerce/backend/frontend/src/reduxState/reducers/productReducers.js",[],[],"/Users/jacob/Web/django-ecommerce/backend/frontend/src/reduxState/reducers/userReducers.js",[],[],"/Users/jacob/Web/django-ecommerce/backend/frontend/src/components/Loader.js",[],[],"/Users/jacob/Web/django-ecommerce/backend/frontend/src/components/Message.js",[],[],"/Users/jacob/Web/django-ecommerce/backend/frontend/src/components/FormContainer.js",[],[],"/Users/jacob/Web/django-ecommerce/backend/frontend/src/components/CheckoutProgress.js",[],[],"/Users/jacob/Web/django-ecommerce/backend/frontend/src/reduxState/actions/userActions.js",["229"],[],"import {\n    USER_LOGIN_REQUEST,\n    USER_LOGIN_SUCCESS,\n    USER_LOGIN_FAIL,\n\n    USER_LOGOUT,\n\n    USER_REGISTER_REQUEST,\n    USER_REGISTER_SUCCESS,\n    USER_REGISTER_FAIL,\n\n    USER_DATA_REQUEST,\n    USER_DATA_SUCCESS,\n    USER_DATA_FAIL,\n    USER_DATA_RESET,\n\n    USER_UPDATE_REQUEST,\n    USER_UPDATE_SUCCESS,\n    USER_UPDATE_FAIL,\n    USER_UPDATE_RESET,\n} from '../constants/userConstants'\n\nimport { ORDERS_RESET } from '../constants/orderConstants'\n\nimport axios from 'axios'\n\nexport const login = (email, password) => async (dispatch) => {\n    try {\n        dispatch({\n            type: USER_LOGIN_REQUEST,\n        })\n\n        /* post request data configuration */\n        const config = {\n            headers: {\n                'Content-type': 'application/json'\n            }\n        }\n        /* generate the post request data with axios */\n        const { data } = await axios.post(\n            '/api/users/login/',\n            { 'username': email, 'password': password },\n            config\n        )\n\n        dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload: data  \n        })\n\n        /* setting user data to local storage */\n        localStorage.setItem('userData', JSON.stringify(data))\n\n    } catch (err) {\n        dispatch({\n            type:USER_LOGIN_FAIL,\n            payload: err.response && err.response.data.detail ? err.response.data.detail : err.message\n        })\n    }\n}\n\nexport const logout = (dispatch) => {\n    /* remove userData from local storage */\n    localStorage.removeItem('userData')\n    /* immediately update global state to remove userData */\n    dispatch({\n        type: USER_LOGOUT\n    })\n    /* reset the stored userData for updating a profile whenever logging out */\n    dispatch({\n        type: USER_DATA_RESET\n    })\n    /* reset the stored orders whenever logging out */\n    dispatch({\n        type: ORDERS_RESET\n    })\n\n}\n\nexport const register = (name, email, password) => async (dispatch) => {\n    try {\n        dispatch({\n            type: USER_REGISTER_REQUEST,\n        })\n\n        /* request data configuration */\n        const config = {\n            headers: {\n                'Content-type': 'application/json'\n            }\n        }\n        /* generate the post request data with axios */\n        const { data } = await axios.post(\n            '/api/users/register/',\n            { 'name': name, 'email': email, 'password': password },\n            config\n        )\n\n        dispatch({\n            type: USER_REGISTER_SUCCESS,\n            payload: data  \n        })\n        /* immediately log in the new user */\n        dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload: data  \n        })\n\n        /* setting user data to local storage */\n        localStorage.setItem('userData', JSON.stringify(data))\n\n    } catch (err) {\n        dispatch({\n            type:USER_REGISTER_FAIL,\n            payload: err.response && err.response.data.detail ? err.response.data.detail : err.message\n        })\n    }\n}\n\nexport const getUserData = (id) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: USER_DATA_REQUEST,\n        })\n        /* getting userData from global state */\n        const { userLogin: { userData } } = getState()\n        \n        /* request data configuration */\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                'Authorization': `Bearer ${userData.token}`\n            }\n        }\n        /* generate the post request data with axios */\n        const { data } = await axios.get(\n            `/api/users/${id}/`,\n            config\n        )\n\n        dispatch({\n            type: USER_DATA_SUCCESS,\n            payload: data  \n        })\n\n        /* setting user data to local storage */\n        localStorage.setItem('userData', JSON.stringify(data))\n\n    } catch (err) {\n        dispatch({\n            type:USER_DATA_FAIL,\n            payload: err.response && err.response.data.detail ? err.response.data.detail : err.message\n        })\n    }\n}\n\nexport const updateUserData = (user) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: USER_UPDATE_REQUEST,\n        })\n        /* getting userData from global state */\n        const { userLogin: { userData } } = getState()\n        \n        /* request data configuration */\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                'Authorization': `Bearer ${userData.token}`\n            }\n        }\n        /* generate the post request data with axios */\n        const { data } = await axios.put(\n            `/api/users/profile/update/`,\n            user,\n            config\n        )\n\n        dispatch({\n            type: USER_UPDATE_SUCCESS,\n            payload: data  \n        })\n\n        /* log in the user with the updated userData */\n        dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload: data  \n        })\n        /* setting updated user data to local storage */\n        localStorage.setItem('userData', JSON.stringify(data))\n\n    } catch (err) {\n        dispatch({\n            type:USER_UPDATE_FAIL,\n            payload: err.response && err.response.data.detail ? err.response.data.detail : err.message\n        })\n    }\n}","/Users/jacob/Web/django-ecommerce/backend/frontend/src/reduxState/actions/cartActions.js",[],[],"/Users/jacob/Web/django-ecommerce/backend/frontend/src/reduxState/actions/orderActions.js",[],[],"/Users/jacob/Web/django-ecommerce/backend/frontend/src/reduxState/actions/productActions.js",[],[],"/Users/jacob/Web/django-ecommerce/backend/frontend/src/reduxState/constants/userConstants.js",[],[],"/Users/jacob/Web/django-ecommerce/backend/frontend/src/reduxState/constants/orderConstants.js",[],[],"/Users/jacob/Web/django-ecommerce/backend/frontend/src/components/products/Product.js",[],[],"/Users/jacob/Web/django-ecommerce/backend/frontend/src/components/products/Rating.js",[],[],"/Users/jacob/Web/django-ecommerce/backend/frontend/src/reduxState/constants/productConstants.js",[],[],"/Users/jacob/Web/django-ecommerce/backend/frontend/src/reduxState/constants/cartConstants.js",[],[],"/Users/jacob/Web/django-ecommerce/backend/frontend/src/reduxState/constants/eventsConstants.js",[],[],["230","231"],"/Users/jacob/Web/django-ecommerce/backend/frontend/src/views/EventView.js",["232"],[],"import React, { useState, useEffect} from 'react'\nimport { Link, useParams, useNavigate } from 'react-router-dom'\nimport { Row, Col, Image, ListGroup, Button, Card, Form, Table } from 'react-bootstrap'\n// react redux import for global state handling+API calls\nimport { useDispatch, useSelector } from 'react-redux'\nimport { listEventDetails, listRaffleTickets, createRaffleTicket } from '../reduxState/actions/eventActions'\n// components\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\n\nfunction EventView() {\n    const {id} = useParams()\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [message, setMessage] = useState('')\n\n    const dispatch = useDispatch()\n\n    const eventDetailsState = useSelector(state => state.eventDetails)\n    const { loading, event, error } = eventDetailsState\n    \n    const raffleTicketsState = useSelector(state => state.raffleTickets)\n    const { loading: raffleTicketsLoading , raffleTickets, error: raffleTicketsError } = raffleTicketsState\n\n    const raffleTicketCreateState = useSelector(state => state.raffleTicketCreate)\n    const { error: raffleTicketCreateError } = raffleTicketCreateState\n\n    useEffect(() => {\n        dispatch(listEventDetails(id))\n        dispatch(listRaffleTickets(id))\n    }, [dispatch, id])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        console.log('submitted raffle ticket')\n        setMessage('')\n\n        dispatch(createRaffleTicket({\n            'event': event,\n            'name': name,\n            'email': email\n            \n        }))\n        setMessage('Your raffle ticket was successfully entered.')\n\n    }\n\n    return (\n        <div>\n            <Link to='/' className='btn btn-light my-3'>Return</Link>\n            {\n                loading ? <Loader />\n                        : error ? <Message variant='warning' children={error} /> \n                                : (\n                                    <Row>\n                                        <Col sm={8}>\n                                            <Row className='pb-5'>\n                                                <Image src={event.image} alt={event.eventName} fluid /> \n                                            </Row>\n\n                                            <Row>\n                                                <ListGroup variant=\"flush\">\n                                                    <ListGroup.Item style={{textAlign: 'center'}}>\n                                                        <h3>{event.eventName}</h3>\n                                                    </ListGroup.Item>\n\n                                                    <ListGroup.Item>\n                                                        Category: {event.category}\n                                                    </ListGroup.Item>\n\n                                                    <ListGroup.Item>\n                                                        Description: {event.description}\n                                                    </ListGroup.Item> \n                                                </ListGroup>\n                                            </Row>\n\n                                        </Col>    \n                                        <Col sm={1}/>\n                                        <Col sm={3}>\n                                            <Row>\n                                                <Card>\n                                                    <Card.Title className='mt-5' style={{textAlign: 'center'}}>Enter Raffle For a Chance to Win!</Card.Title>\n                                                    <Card.Body>\n                                                        { raffleTicketCreateError ? (<Message variant='warning'>{raffleTicketCreateError}</Message>) :\n                                                            (message && <Message variant='success'>{message}</Message>)\n                                                        }\n                                                        <Form onSubmit={submitHandler}>\n                                                            <Form.Group className='my-4' controlId='name'>\n                                                                <Form.Label>Name</Form.Label>\n                                                                <Form.Control \n                                                                    required\n                                                                    type='name' \n                                                                    placeholder='Enter Name' \n                                                                    value={name} \n                                                                    onChange={(e) => setName(e.target.value)}\n                                                                />\n                                                            </Form.Group>\n\n                                                            <Form.Group className='my-4' controlId='email'>\n                                                                <Form.Label>Email Address</Form.Label>\n                                                                <Form.Control \n                                                                    required\n                                                                    type='email' \n                                                                    placeholder='Enter Email' \n                                                                    value={email} \n                                                                    onChange={(e) => setEmail(e.target.value)}\n                                                                />\n                                                            </Form.Group>\n\n                                                            <Button type='submit' variant='primary'>Submit</Button>\n\n                                                        </Form>\n                                                    </Card.Body>\n                                                </Card>\n                                            </Row>\n                                            <Row className= 'pt-4'>\n                                                <Col>\n                                                    <h2 style={{textAlign: 'center'}}>Raffle Entries</h2>\n                                                    { raffleTicketsLoading ? (\n                                                        <Loader />\n                                                    ) : raffleTicketsError ? (\n                                                        <Message variant='warning'>{raffleTicketsError}</Message>\n                                                    ) : (\n                                                        \n                                                        <Table  striped responsive className='table-sm'>\n                                                            <thead>\n                                                                <tr>\n                                                                    <th>Name</th>\n                                                                    <th>Email</th>\n                                                                </tr>\n                                                            </thead>\n                                                            <tbody >\n                                                                    {raffleTickets.map(ticket => (\n                                                                        <tr key={ticket._id}>\n                                                                            <td>{ticket.name}</td>\n                                                                            <td>{ticket.email}</td>\n                                                                        </tr>\n                                                                    ))}\n                                                            </tbody>\n                                                        </Table>\n                                                     \n                                                    )}\n                                                </Col>\n\n                                            </Row>\n                                        </Col>\n\n                                    </Row>\n                                )\n\n            }\n                \n        </div>\n    )\n}\n\nexport default EventView","/Users/jacob/Web/django-ecommerce/backend/frontend/src/reduxState/actions/eventActions.js",["233"],[],"import axios from 'axios'\n\nimport {\n    EVENTS_REQUEST,\n    EVENTS_SUCCESS,\n    EVENTS_FAIL,\n\n    EVENT_DETAILS_REQUEST,\n    EVENT_DETAILS_SUCCESS,\n    EVENT_DETAILS_FAIL,\n\n    RAFFLE_TICKETS_REQUEST,\n    RAFFLE_TICKETS_SUCCESS,\n    RAFFLE_TICKETS_FAIL,\n\n    RAFFLE_TICKET_CREATE_REQUEST,\n    RAFFLE_TICKET_CREATE_SUCCESS,\n    RAFFLE_TICKET_CREATE_FAIL,\n    RAFFLE_TICKET_CREATE_RESET,\n    \n} from '../constants/eventsConstants'\n\n/* handles the getEvents API call for a specific event */\nexport const listEvents = () => async (dispatch) => {\n    try {\n        dispatch({type: EVENTS_REQUEST})\n        const { data } = await axios.get(`/api/events/`)\n        dispatch({\n            type: EVENTS_SUCCESS,\n            payload: data\n        })\n    } catch(err) {\n        dispatch({\n            type: EVENTS_FAIL,\n            payload: err.response && err.response.data.detail ? err.response.data.detail : err.message\n        })\n    }\n}\n\n/* handles the getEvent API call for a specific event */\nexport const listEventDetails = (id) => async (dispatch) => {\n    try {\n        dispatch({type: EVENT_DETAILS_REQUEST})\n        const { data } = await axios.get(`/api/events/${id}`)\n        dispatch({\n            type: EVENT_DETAILS_SUCCESS,\n            payload: data\n        })\n    } catch(err) {\n        dispatch({\n            type: EVENT_DETAILS_FAIL,\n            payload: err.response && err.response.data.detail ? err.response.data.detail : err.message\n        })\n    }\n}\n\n/* handles the getRaffleTickets API call for a specific event */\nexport const listRaffleTickets = (id) => async (dispatch) => {\n    try {\n        dispatch({type: RAFFLE_TICKETS_REQUEST})\n        const { data } = await axios.get(`/api/events/tickets/${id}`)\n        dispatch({\n            type: RAFFLE_TICKETS_SUCCESS,\n            payload: data\n        })\n    } catch(err) {\n        dispatch({\n            type: RAFFLE_TICKETS_FAIL,\n            payload: err.response && err.response.data.detail ? err.response.data.detail : err.message\n        })\n    }\n}\n\n/* handles the addRaffleTicket API */\nexport const createRaffleTicket = (raffleTicket) => async (dispatch) => {\n    try {\n        dispatch({\n            type: RAFFLE_TICKET_CREATE_REQUEST,\n        })\n        \n        /* request data configuration */\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n            }\n        }\n        /* generate the post request data with axios */\n        const { data } = await axios.post(\n            `/api/events/tickets/add/`,\n            raffleTicket,\n            config\n        )\n\n        dispatch({\n            type: RAFFLE_TICKET_CREATE_SUCCESS,\n            payload: data  \n        })\n\n    } catch (err) {\n        dispatch({\n            type:RAFFLE_TICKET_CREATE_FAIL,\n            payload: err.response && err.response.data.detail ? err.response.data.detail : err.message\n        })\n    }\n}",{"ruleId":"234","replacedBy":"235"},{"ruleId":"236","replacedBy":"237"},{"ruleId":"234","replacedBy":"238"},{"ruleId":"236","replacedBy":"239"},{"ruleId":"240","severity":1,"message":"241","line":7,"column":10,"nodeType":"242","messageId":"243","endLine":7,"endColumn":20},{"ruleId":"240","severity":1,"message":"244","line":10,"column":8,"nodeType":"242","messageId":"243","endLine":10,"endColumn":14},{"ruleId":"240","severity":1,"message":"245","line":2,"column":29,"nodeType":"242","messageId":"243","endLine":2,"endColumn":40},{"ruleId":"240","severity":1,"message":"246","line":2,"column":42,"nodeType":"242","messageId":"243","endLine":2,"endColumn":56},{"ruleId":"240","severity":1,"message":"247","line":1,"column":27,"nodeType":"242","messageId":"243","endLine":1,"endColumn":36},{"ruleId":"240","severity":1,"message":"248","line":2,"column":10,"nodeType":"242","messageId":"243","endLine":2,"endColumn":14},{"ruleId":"249","severity":1,"message":"250","line":64,"column":8,"nodeType":"251","endLine":64,"endColumn":43,"suggestions":"252"},{"ruleId":"240","severity":1,"message":"253","line":1,"column":17,"nodeType":"242","messageId":"243","endLine":1,"endColumn":25},{"ruleId":"240","severity":1,"message":"247","line":1,"column":27,"nodeType":"242","messageId":"243","endLine":1,"endColumn":36},{"ruleId":"240","severity":1,"message":"254","line":2,"column":10,"nodeType":"242","messageId":"243","endLine":2,"endColumn":18},{"ruleId":"240","severity":1,"message":"253","line":1,"column":17,"nodeType":"242","messageId":"243","endLine":1,"endColumn":25},{"ruleId":"249","severity":1,"message":"255","line":32,"column":8,"nodeType":"251","endLine":32,"endColumn":19,"suggestions":"256"},{"ruleId":"240","severity":1,"message":"253","line":1,"column":17,"nodeType":"242","messageId":"243","endLine":1,"endColumn":25},{"ruleId":"249","severity":1,"message":"257","line":44,"column":8,"nodeType":"251","endLine":44,"endColumn":27,"suggestions":"258"},{"ruleId":"249","severity":1,"message":"259","line":25,"column":8,"nodeType":"251","endLine":25,"endColumn":25,"suggestions":"260"},{"ruleId":"234","replacedBy":"261"},{"ruleId":"236","replacedBy":"262"},{"ruleId":"240","severity":1,"message":"263","line":20,"column":5,"nodeType":"242","messageId":"243","endLine":20,"endColumn":22},{"ruleId":"234","replacedBy":"264"},{"ruleId":"236","replacedBy":"265"},{"ruleId":"240","severity":1,"message":"266","line":2,"column":27,"nodeType":"242","messageId":"243","endLine":2,"endColumn":38},{"ruleId":"240","severity":1,"message":"267","line":19,"column":5,"nodeType":"242","messageId":"243","endLine":19,"endColumn":31},"no-native-reassign",["268"],"no-negated-in-lhs",["269"],["268"],["269"],"no-unused-vars","'listEvents' is defined but never used.","Identifier","unusedVar","'Loader' is defined but never used.","'useLocation' is defined but never used.","'NavigationType' is defined but never used.","'useEffect' is defined but never used.","'Link' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'navigate' and 'orders'. Either include them or remove the dependency array.","ArrayExpression",["270"],"'useState' is defined but never used.","'Navigate' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["271"],"React Hook useEffect has missing dependencies: 'cart.paymentMethod', 'dispatch', and 'order._id'. Either include them or remove the dependency array.",["272"],"React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["273"],["268"],["269"],"'USER_UPDATE_RESET' is defined but never used.",["268"],["269"],"'useNavigate' is defined but never used.","'RAFFLE_TICKET_CREATE_RESET' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"274","fix":"275"},{"desc":"276","fix":"277"},{"desc":"278","fix":"279"},{"desc":"280","fix":"281"},"Update the dependencies array to be: [dispatch, userData, user, success, navigate, orders]",{"range":"282","text":"283"},"Update the dependencies array to be: [order, id, dispatch]",{"range":"284","text":"285"},"Update the dependencies array to be: [success, navigate, cart.paymentMethod, order._id, dispatch]",{"range":"286","text":"287"},"Update the dependencies array to be: [dispatch, id, match]",{"range":"288","text":"289"},[2562,2597],"[dispatch, userData, user, success, navigate, orders]",[1012,1023],"[order, id, dispatch]",[1791,1810],"[success, navigate, cart.paymentMethod, order._id, dispatch]",[962,979],"[dispatch, id, match]"]
{"ast":null,"code":"var _jsxFileName = \"/Users/jacob/Web/django-ecommerce/frontend/src/views/ProfileView.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { Form, Button, Row, Col } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUserData, updateUserData } from '../reduxState/actions/userActions'; // components\n\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ProfileView() {\n  _s();\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [message, setMessage] = useState('');\n  let navigate = useNavigate();\n  const dispatch = useDispatch();\n  /* getting userData from redux state */\n\n  const userDataState = useSelector(state => state.userData);\n  const {\n    error,\n    loading,\n    user\n  } = userDataState;\n  /* getting userData from userLogin in redux state to ensure user is logged in */\n\n  const userLoginState = useSelector(state => state.userLogin);\n  const {\n    userData\n  } = userLoginState;\n  useEffect(() => {\n    /* redirect the user from this page if they are not logged in */\n    if (!userData) {\n      navigate('/login');\n    } else {\n      if (!user || !user.name) {\n        /* no user info loaded, so dispatch to get it */\n        dispatch(getUserData('profile'));\n      } else {\n        /* user info is already loaded, so pre-fill the component state */\n        setName(user.name);\n        setEmail(user.email);\n      }\n    }\n  }, [dispatch, userData, user, navigate]);\n\n  const submitHandler = e => {\n    e.preventDefault();\n    setMessage('');\n\n    if (password !== confirmPassword) {\n      setMessage('Passwords do not match.');\n    } else if (password != password.length < 8) {\n      setMessage('Password must be at least 8 characters long.');\n    } else {\n      dispatch(updateUserData);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Row, {\n    children: [/*#__PURE__*/_jsxDEV(Col, {\n      md: 3,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"User Profile\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), message && /*#__PURE__*/_jsxDEV(Message, {\n        variant: \"warning\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 34\n      }, this), error && /*#__PURE__*/_jsxDEV(Message, {\n        variant: \"warning\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 32\n      }, this), loading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 34\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: submitHandler,\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"my-4\",\n          controlId: \"name\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            required: true,\n            type: \"name\",\n            placeholder: \"Enter Name\",\n            value: name,\n            onChange: e => setName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"my-4\",\n          controlId: \"email\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Email Address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            required: true,\n            type: \"email\",\n            placeholder: \"Enter Email\",\n            value: email,\n            onChange: e => setEmail(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"my-4\",\n          controlId: \"password\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"password\",\n            placeholder: \"Enter Password\",\n            value: password,\n            onChange: e => setPassword(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"my-4\",\n          controlId: \"confirmPassword\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Confirm Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"password\",\n            placeholder: \"Enter Password Again\",\n            value: confirmPassword,\n            onChange: e => setConfirmPassword(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"primary\",\n          children: \" Register \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Col, {\n      md: 3,\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"My Orders\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ProfileView, \"BV55XXdzDWlPu5ivKCGMlTDt3Y8=\", false, function () {\n  return [useNavigate, useDispatch, useSelector, useSelector];\n});\n\n_c = ProfileView;\nexport default ProfileView;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProfileView\");","map":{"version":3,"sources":["/Users/jacob/Web/django-ecommerce/frontend/src/views/ProfileView.js"],"names":["React","useState","useEffect","Link","useNavigate","Form","Button","Row","Col","useDispatch","useSelector","getUserData","updateUserData","Loader","Message","ProfileView","name","setName","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","message","setMessage","navigate","dispatch","userDataState","state","userData","error","loading","user","userLoginState","userLogin","submitHandler","e","preventDefault","length","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Link, useNavigate} from 'react-router-dom'\nimport { Form, Button, Row, Col} from 'react-bootstrap'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getUserData, updateUserData  } from '../reduxState/actions/userActions'\n\n// components\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\n\nfunction ProfileView() {\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [confirmPassword, setConfirmPassword] = useState('')\n    const [message, setMessage] = useState('')\n\n    let navigate = useNavigate()\n    const dispatch = useDispatch()\n\n    /* getting userData from redux state */\n    const userDataState = useSelector(state => state.userData)\n    const { error, loading, user } = userDataState\n\n    /* getting userData from userLogin in redux state to ensure user is logged in */\n    const userLoginState = useSelector(state => state.userLogin)\n    const { userData } = userLoginState\n\n\n\n    useEffect(() => {\n        /* redirect the user from this page if they are not logged in */\n        if(!userData) {\n            navigate('/login')\n        } else {\n            if(!user || !user.name) {\n                /* no user info loaded, so dispatch to get it */\n                dispatch(getUserData('profile'))\n            } else {\n                /* user info is already loaded, so pre-fill the component state */\n                setName(user.name)\n                setEmail(user.email)\n            }\n        }\n    }, [dispatch, userData, user, navigate])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        setMessage('')\n\n        if(password !== confirmPassword) {\n            setMessage('Passwords do not match.')\n        } else if (password != password.length < 8){\n            setMessage('Password must be at least 8 characters long.')\n        } else {\n            dispatch(updateUserData)\n        }\n\n    }\n\n    return (\n        <Row>\n            <Col md={3}>\n                <h2>User Profile</h2>\n                    { message && <Message variant='warning'>{message}</Message>}\n                    { error && <Message variant='warning'>{error}</Message> }\n                    { loading && <Loader /> }\n                    <Form onSubmit={submitHandler}>\n                        <Form.Group className='my-4' controlId='name'>\n                            <Form.Label>Name</Form.Label>\n                            <Form.Control \n                                required\n                                type='name' \n                                placeholder='Enter Name' \n                                value={name} \n                                onChange={(e) => setName(e.target.value)}\n                            />\n                        </Form.Group>\n\n                        <Form.Group className='my-4' controlId='email'>\n                            <Form.Label>Email Address</Form.Label>\n                            <Form.Control \n                                required\n                                type='email' \n                                placeholder='Enter Email' \n                                value={email} \n                                onChange={(e) => setEmail(e.target.value)}\n                            />\n                        </Form.Group>\n\n                        <Form.Group className='my-4' controlId='password'>\n                            <Form.Label>Password</Form.Label>\n                            <Form.Control \n                                type='password' \n                                placeholder='Enter Password' \n                                value={password} \n                                onChange={(e) => setPassword(e.target.value)}\n                            />\n                        </Form.Group>\n\n                        <Form.Group className='my-4' controlId='confirmPassword'>\n                            <Form.Label>Confirm Password</Form.Label>\n                            <Form.Control \n                                type='password' \n                                placeholder='Enter Password Again' \n                                value={confirmPassword} \n                                onChange={(e) => setConfirmPassword(e.target.value)}\n                            />\n                        </Form.Group>\n\n                        <Button type='submit' variant='primary'> Register </Button>\n\n                    </Form>\n\n            </Col>\n\n            <Col md={3}>\n                <h2>My Orders</h2>\n                \n            </Col>\n        </Row>\n    )\n}\n\nexport default ProfileView"]},"metadata":{},"sourceType":"module"}
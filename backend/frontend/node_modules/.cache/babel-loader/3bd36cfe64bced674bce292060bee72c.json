{"ast":null,"code":"import { USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGIN_FAIL, USER_LOGOUT, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_REGISTER_FAIL, USER_DATA_REQUEST, USER_DATA_SUCCESS, USER_DATA_FAIL, USER_DATA_RESET, USER_UPDATE_REQUEST, USER_UPDATE_SUCCESS, USER_UPDATE_FAIL, USER_UPDATE_RESET } from '../constants/userConstants';\nimport second from '../constants';\nimport axios from 'axios';\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    /* post request data configuration */\n\n    const config = {\n      headers: {\n        'Content-type': 'application/json'\n      }\n    };\n    /* generate the post request data with axios */\n\n    const {\n      data\n    } = await axios.post('/api/users/login/', {\n      'username': email,\n      'password': password\n    }, config);\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    /* setting user data to local storage */\n\n    localStorage.setItem('userData', JSON.stringify(data));\n  } catch (err) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: err.response && err.response.data.detail ? err.response.data.detail : err.message\n    });\n  }\n};\nexport const logout = dispatch => {\n  /* remove userData from local storage */\n  localStorage.removeItem('userData');\n  /* immediately update global state to remove userData */\n\n  dispatch({\n    type: USER_LOGOUT\n  });\n  /* reset the stored userData for updating a profile whenever logging out */\n\n  dispatch({\n    type: USER_DATA_RESET\n  });\n};\nexport const register = (name, email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n    /* request data configuration */\n\n    const config = {\n      headers: {\n        'Content-type': 'application/json'\n      }\n    };\n    /* generate the post request data with axios */\n\n    const {\n      data\n    } = await axios.post('/api/users/register/', {\n      'name': name,\n      'email': email,\n      'password': password\n    }, config);\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    /* immediately log in the new user */\n\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    /* setting user data to local storage */\n\n    localStorage.setItem('userData', JSON.stringify(data));\n  } catch (err) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: err.response && err.response.data.detail ? err.response.data.detail : err.message\n    });\n  }\n};\nexport const getUserData = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DATA_REQUEST\n    });\n    /* getting userData from global state */\n\n    const {\n      userLogin: {\n        userData\n      }\n    } = getState();\n    /* request data configuration */\n\n    const config = {\n      headers: {\n        'Content-type': 'application/json',\n        'Authorization': `Bearer ${userData.token}`\n      }\n    };\n    /* generate the post request data with axios */\n\n    const {\n      data\n    } = await axios.get(`/api/users/${id}/`, config);\n    dispatch({\n      type: USER_DATA_SUCCESS,\n      payload: data\n    });\n    /* setting user data to local storage */\n\n    localStorage.setItem('userData', JSON.stringify(data));\n  } catch (err) {\n    dispatch({\n      type: USER_DATA_FAIL,\n      payload: err.response && err.response.data.detail ? err.response.data.detail : err.message\n    });\n  }\n};\nexport const updateUserData = user => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_UPDATE_REQUEST\n    });\n    /* getting userData from global state */\n\n    const {\n      userLogin: {\n        userData\n      }\n    } = getState();\n    /* request data configuration */\n\n    const config = {\n      headers: {\n        'Content-type': 'application/json',\n        'Authorization': `Bearer ${userData.token}`\n      }\n    };\n    /* generate the post request data with axios */\n\n    const {\n      data\n    } = await axios.put(`/api/users/profile/update/`, user, config);\n    dispatch({\n      type: USER_UPDATE_SUCCESS,\n      payload: data\n    });\n    /* log in the user with the updated userData */\n\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    /* setting updated user data to local storage */\n\n    localStorage.setItem('userData', JSON.stringify(data));\n  } catch (err) {\n    dispatch({\n      type: USER_UPDATE_FAIL,\n      payload: err.response && err.response.data.detail ? err.response.data.detail : err.message\n    });\n  }\n};","map":{"version":3,"sources":["/Users/jacob/Web/django-ecommerce/frontend/src/reduxState/actions/userActions.js"],"names":["USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","USER_LOGOUT","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL","USER_DATA_REQUEST","USER_DATA_SUCCESS","USER_DATA_FAIL","USER_DATA_RESET","USER_UPDATE_REQUEST","USER_UPDATE_SUCCESS","USER_UPDATE_FAIL","USER_UPDATE_RESET","second","axios","login","email","password","dispatch","type","config","headers","data","post","payload","localStorage","setItem","JSON","stringify","err","response","detail","message","logout","removeItem","register","name","getUserData","id","getState","userLogin","userData","token","get","updateUserData","user","put"],"mappings":"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","sourcesContent":["import {\n    USER_LOGIN_REQUEST,\n    USER_LOGIN_SUCCESS,\n    USER_LOGIN_FAIL,\n\n    USER_LOGOUT,\n\n    USER_REGISTER_REQUEST,\n    USER_REGISTER_SUCCESS,\n    USER_REGISTER_FAIL,\n\n    USER_DATA_REQUEST,\n    USER_DATA_SUCCESS,\n    USER_DATA_FAIL,\n    USER_DATA_RESET,\n\n    USER_UPDATE_REQUEST,\n    USER_UPDATE_SUCCESS,\n    USER_UPDATE_FAIL,\n    USER_UPDATE_RESET,\n} from '../constants/userConstants'\n\nimport second from '../constants'\n\nimport axios from 'axios'\n\nexport const login = (email, password) => async (dispatch) => {\n    try {\n        dispatch({\n            type: USER_LOGIN_REQUEST,\n        })\n\n        /* post request data configuration */\n        const config = {\n            headers: {\n                'Content-type': 'application/json'\n            }\n        }\n        /* generate the post request data with axios */\n        const { data } = await axios.post(\n            '/api/users/login/',\n            { 'username': email, 'password': password },\n            config\n        )\n\n        dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload: data  \n        })\n\n        /* setting user data to local storage */\n        localStorage.setItem('userData', JSON.stringify(data))\n\n    } catch (err) {\n        dispatch({\n            type:USER_LOGIN_FAIL,\n            payload: err.response && err.response.data.detail ? err.response.data.detail : err.message\n        })\n    }\n}\n\nexport const logout = (dispatch) => {\n    /* remove userData from local storage */\n    localStorage.removeItem('userData')\n    /* immediately update global state to remove userData */\n    dispatch({\n        type: USER_LOGOUT\n    })\n    /* reset the stored userData for updating a profile whenever logging out */\n    dispatch({\n        type: USER_DATA_RESET\n    })\n\n}\n\nexport const register = (name, email, password) => async (dispatch) => {\n    try {\n        dispatch({\n            type: USER_REGISTER_REQUEST,\n        })\n\n        /* request data configuration */\n        const config = {\n            headers: {\n                'Content-type': 'application/json'\n            }\n        }\n        /* generate the post request data with axios */\n        const { data } = await axios.post(\n            '/api/users/register/',\n            { 'name': name, 'email': email, 'password': password },\n            config\n        )\n\n        dispatch({\n            type: USER_REGISTER_SUCCESS,\n            payload: data  \n        })\n        /* immediately log in the new user */\n        dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload: data  \n        })\n\n        /* setting user data to local storage */\n        localStorage.setItem('userData', JSON.stringify(data))\n\n    } catch (err) {\n        dispatch({\n            type:USER_REGISTER_FAIL,\n            payload: err.response && err.response.data.detail ? err.response.data.detail : err.message\n        })\n    }\n}\n\nexport const getUserData = (id) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: USER_DATA_REQUEST,\n        })\n        /* getting userData from global state */\n        const { userLogin: { userData } } = getState()\n        \n        /* request data configuration */\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                'Authorization': `Bearer ${userData.token}`\n            }\n        }\n        /* generate the post request data with axios */\n        const { data } = await axios.get(\n            `/api/users/${id}/`,\n            config\n        )\n\n        dispatch({\n            type: USER_DATA_SUCCESS,\n            payload: data  \n        })\n\n        /* setting user data to local storage */\n        localStorage.setItem('userData', JSON.stringify(data))\n\n    } catch (err) {\n        dispatch({\n            type:USER_DATA_FAIL,\n            payload: err.response && err.response.data.detail ? err.response.data.detail : err.message\n        })\n    }\n}\n\nexport const updateUserData = (user) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: USER_UPDATE_REQUEST,\n        })\n        /* getting userData from global state */\n        const { userLogin: { userData } } = getState()\n        \n        /* request data configuration */\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                'Authorization': `Bearer ${userData.token}`\n            }\n        }\n        /* generate the post request data with axios */\n        const { data } = await axios.put(\n            `/api/users/profile/update/`,\n            user,\n            config\n        )\n\n        dispatch({\n            type: USER_UPDATE_SUCCESS,\n            payload: data  \n        })\n\n        /* log in the user with the updated userData */\n        dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload: data  \n        })\n        /* setting updated user data to local storage */\n        localStorage.setItem('userData', JSON.stringify(data))\n\n    } catch (err) {\n        dispatch({\n            type:USER_UPDATE_FAIL,\n            payload: err.response && err.response.data.detail ? err.response.data.detail : err.message\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}
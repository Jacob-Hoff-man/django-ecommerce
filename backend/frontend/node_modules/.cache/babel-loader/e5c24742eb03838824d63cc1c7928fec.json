{"ast":null,"code":"var _jsxFileName = \"/Users/jacob/Web/django-ecommerce/backend/frontend/src/views/EventView.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Link, useParams, useNavigate } from 'react-router-dom';\nimport { Row, Col, Image, ListGroup, Button, Card, Form } from 'react-bootstrap'; // react redux import for global state handling+API calls\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { listEventDetails, listRaffleTickets, createRaffleTicket } from '../reduxState/actions/eventActions'; // components\n\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction EventView() {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [message, setMessage] = useState('');\n  const dispatch = useDispatch();\n  const eventDetails = useSelector(state => state.eventDetails);\n  const {\n    loading,\n    event,\n    error\n  } = eventDetails;\n  useEffect(() => {\n    dispatch(listEventDetails(id));\n  }, [dispatch, id]);\n\n  const submitHandler = e => {\n    console.log('submitted raffle ticket'); // e.preventDefault()\n    // setMessage('')\n    // if(password !== confirmPassword) {\n    //     setMessageVariant('warning')\n    //     setMessage('Passwords do not match.')\n    // } else if (password !== '' && password.length < 8){\n    //     setMessageVariant('warning')\n    //     setMessage('Password must be at least 8 characters long.')\n    // } else {\n    //     dispatch(updateUserData({\n    //         'id': user._id,\n    //         'name': name,\n    //         'email': email,\n    //         'password': password\n    //     }))\n    //     setMessageVariant('success')\n    //     setMessage('Your profile was successfully updated.')\n    // }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      className: \"btn btn-light my-3\",\n      children: \"Return\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), loading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 27\n    }, this) : error ? /*#__PURE__*/_jsxDEV(Message, {\n      variant: \"warning\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 35\n    }, this) : /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        md: 6,\n        children: /*#__PURE__*/_jsxDEV(Image, {\n          src: event.image,\n          alt: event.eventName,\n          fluid: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 45\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 41\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        md: 3,\n        children: /*#__PURE__*/_jsxDEV(ListGroup, {\n          variant: \"flush\",\n          children: [/*#__PURE__*/_jsxDEV(ListGroup.Item, {\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: event.eventName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 53\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 49\n          }, this), /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n            children: [\"Price: $\", event.category]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 49\n          }, this), /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n            children: [\"Description: \", event.description]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 49\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 45\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 41\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        md: 3,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            onSubmit: submitHandler,\n            children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n              className: \"my-4\",\n              controlId: \"name\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 61\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                required: true,\n                type: \"name\",\n                placeholder: \"Enter Name\",\n                value: name,\n                onChange: e => setName(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 61\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 57\n            }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n              className: \"my-4\",\n              controlId: \"email\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Email Address\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 61\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                required: true,\n                type: \"email\",\n                placeholder: \"Enter Email\",\n                value: email,\n                onChange: e => setEmail(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 61\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 57\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              variant: \"primary\",\n              children: \" Register \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 57\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 53\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 45\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 41\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 37\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}\n\n_s(EventView, \"uwjxkgYdrCjM8WrLjJTZ+mrMaNc=\", false, function () {\n  return [useParams, useDispatch, useSelector];\n});\n\n_c = EventView;\nexport default EventView;\n\nvar _c;\n\n$RefreshReg$(_c, \"EventView\");","map":{"version":3,"sources":["/Users/jacob/Web/django-ecommerce/backend/frontend/src/views/EventView.js"],"names":["React","useState","useEffect","Link","useParams","useNavigate","Row","Col","Image","ListGroup","Button","Card","Form","useDispatch","useSelector","listEventDetails","listRaffleTickets","createRaffleTicket","Loader","Message","EventView","id","name","setName","email","setEmail","message","setMessage","dispatch","eventDetails","state","loading","event","error","submitHandler","e","console","log","image","eventName","category","description","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,SAASC,IAAT,EAAeC,SAAf,EAA0BC,WAA1B,QAA6C,kBAA7C;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,KAAnB,EAA0BC,SAA1B,EAAqCC,MAArC,EAA6CC,IAA7C,EAAmDC,IAAnD,QAA+D,iBAA/D,C,CACA;;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,gBAAT,EAA2BC,iBAA3B,EAA8CC,kBAA9C,QAAwE,oCAAxE,C,CACA;;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,OAAP,MAAoB,uBAApB;;;AAEA,SAASC,SAAT,GAAqB;AAAA;;AACjB,QAAM;AAACC,IAAAA;AAAD,MAAOjB,SAAS,EAAtB;AACA,QAAM,CAACkB,IAAD,EAAOC,OAAP,IAAkBtB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACuB,KAAD,EAAQC,QAAR,IAAoBxB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACyB,OAAD,EAAUC,UAAV,IAAwB1B,QAAQ,CAAC,EAAD,CAAtC;AAEA,QAAM2B,QAAQ,GAAGf,WAAW,EAA5B;AAEA,QAAMgB,YAAY,GAAGf,WAAW,CAACgB,KAAK,IAAIA,KAAK,CAACD,YAAhB,CAAhC;AACA,QAAM;AAAEE,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA4BJ,YAAlC;AAEA3B,EAAAA,SAAS,CAAC,MAAM;AACZ0B,IAAAA,QAAQ,CAACb,gBAAgB,CAACM,EAAD,CAAjB,CAAR;AACH,GAFQ,EAEN,CAACO,QAAD,EAAWP,EAAX,CAFM,CAAT;;AAIA,QAAMa,aAAa,GAAIC,CAAD,IAAO;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EADyB,CAEzB;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEH,GAtBD;;AAwBA,sBACI;AAAA,4BACI,QAAC,IAAD;AAAM,MAAA,EAAE,EAAC,GAAT;AAAa,MAAA,SAAS,EAAC,oBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAGQN,OAAO,gBAAG,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YAAH,GACGE,KAAK,gBAAG,QAAC,OAAD;AAAS,MAAA,OAAO,EAAC,SAAjB;AAA2B,MAAA,QAAQ,EAAEA;AAArC;AAAA;AAAA;AAAA;AAAA,YAAH,gBAEK,QAAC,GAAD;AAAA,8BACI,QAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAA,+BACI,QAAC,KAAD;AAAO,UAAA,GAAG,EAAED,KAAK,CAACM,KAAlB;AAAyB,UAAA,GAAG,EAAEN,KAAK,CAACO,SAApC;AAA+C,UAAA,KAAK;AAApD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAKI,QAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAA,+BACI,QAAC,SAAD;AAAW,UAAA,OAAO,EAAC,OAAnB;AAAA,kCACI,QAAC,SAAD,CAAW,IAAX;AAAA,mCACI;AAAA,wBAAKP,KAAK,CAACO;AAAX;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBADJ,eAKI,QAAC,SAAD,CAAW,IAAX;AAAA,mCACaP,KAAK,CAACQ,QADnB;AAAA;AAAA;AAAA;AAAA;AAAA,kBALJ,eASI,QAAC,SAAD,CAAW,IAAX;AAAA,wCACkBR,KAAK,CAACS,WADxB;AAAA;AAAA;AAAA;AAAA;AAAA,kBATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cALJ,eAqBI,QAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAA,+BACI,QAAC,IAAD;AAAA,iCACQ,QAAC,IAAD;AAAM,YAAA,QAAQ,EAAEP,aAAhB;AAAA,oCACI,QAAC,IAAD,CAAM,KAAN;AAAY,cAAA,SAAS,EAAC,MAAtB;AAA6B,cAAA,SAAS,EAAC,MAAvC;AAAA,sCACI,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI,QAAC,IAAD,CAAM,OAAN;AACI,gBAAA,QAAQ,MADZ;AAEI,gBAAA,IAAI,EAAC,MAFT;AAGI,gBAAA,WAAW,EAAC,YAHhB;AAII,gBAAA,KAAK,EAAEZ,IAJX;AAKI,gBAAA,QAAQ,EAAGa,CAAD,IAAOZ,OAAO,CAACY,CAAC,CAACO,MAAF,CAASC,KAAV;AAL5B;AAAA;AAAA;AAAA;AAAA,sBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAYI,QAAC,IAAD,CAAM,KAAN;AAAY,cAAA,SAAS,EAAC,MAAtB;AAA6B,cAAA,SAAS,EAAC,OAAvC;AAAA,sCACI,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI,QAAC,IAAD,CAAM,OAAN;AACI,gBAAA,QAAQ,MADZ;AAEI,gBAAA,IAAI,EAAC,OAFT;AAGI,gBAAA,WAAW,EAAC,aAHhB;AAII,gBAAA,KAAK,EAAEnB,KAJX;AAKI,gBAAA,QAAQ,EAAGW,CAAD,IAAOV,QAAQ,CAACU,CAAC,CAACO,MAAF,CAASC,KAAV;AAL7B;AAAA;AAAA;AAAA;AAAA,sBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBAZJ,eAwBI,QAAC,MAAD;AAAQ,cAAA,IAAI,EAAC,QAAb;AAAsB,cAAA,OAAO,EAAC,SAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAxBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADR;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cArBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAN5B;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAmEH;;GA1GQvB,S;UACQhB,S,EAKIS,W,EAEIC,W;;;KARhBM,S;AA4GT,eAAeA,SAAf","sourcesContent":["import React, { useState, useEffect} from 'react'\nimport { Link, useParams, useNavigate } from 'react-router-dom'\nimport { Row, Col, Image, ListGroup, Button, Card, Form } from 'react-bootstrap'\n// react redux import for global state handling+API calls\nimport { useDispatch, useSelector } from 'react-redux'\nimport { listEventDetails, listRaffleTickets, createRaffleTicket } from '../reduxState/actions/eventActions'\n// components\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\n\nfunction EventView() {\n    const {id} = useParams()\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [message, setMessage] = useState('')\n\n    const dispatch = useDispatch()\n\n    const eventDetails = useSelector(state => state.eventDetails)\n    const { loading, event, error } = eventDetails\n    \n    useEffect(() => {\n        dispatch(listEventDetails(id))\n    }, [dispatch, id])\n\n    const submitHandler = (e) => {\n        console.log('submitted raffle ticket')\n        // e.preventDefault()\n        // setMessage('')\n\n        // if(password !== confirmPassword) {\n        //     setMessageVariant('warning')\n        //     setMessage('Passwords do not match.')\n        // } else if (password !== '' && password.length < 8){\n        //     setMessageVariant('warning')\n        //     setMessage('Password must be at least 8 characters long.')\n        // } else {\n        //     dispatch(updateUserData({\n        //         'id': user._id,\n        //         'name': name,\n        //         'email': email,\n        //         'password': password\n        //     }))\n        //     setMessageVariant('success')\n        //     setMessage('Your profile was successfully updated.')\n        // }\n\n    }\n\n    return (\n        <div>\n            <Link to='/' className='btn btn-light my-3'>Return</Link>\n            {\n                loading ? <Loader />\n                        : error ? <Message variant='warning' children={error} /> \n                                : (\n                                    <Row>\n                                        <Col md={6} >\n                                            <Image src={event.image} alt={event.eventName} fluid /> \n                                        </Col>    \n\n                                        <Col md={3}>\n                                            <ListGroup variant=\"flush\">\n                                                <ListGroup.Item>\n                                                    <h3>{event.eventName}</h3>\n                                                </ListGroup.Item>\n\n                                                <ListGroup.Item>\n                                                    Price: ${event.category}\n                                                </ListGroup.Item>\n\n                                                <ListGroup.Item>\n                                                    Description: {event.description}\n                                                </ListGroup.Item> \n                                            </ListGroup>\n                                        </Col>\n\n                                        <Col md={3}>\n                                            <Card>\n                                                    <Form onSubmit={submitHandler}>\n                                                        <Form.Group className='my-4' controlId='name'>\n                                                            <Form.Label>Name</Form.Label>\n                                                            <Form.Control \n                                                                required\n                                                                type='name' \n                                                                placeholder='Enter Name' \n                                                                value={name} \n                                                                onChange={(e) => setName(e.target.value)}\n                                                            />\n                                                        </Form.Group>\n\n                                                        <Form.Group className='my-4' controlId='email'>\n                                                            <Form.Label>Email Address</Form.Label>\n                                                            <Form.Control \n                                                                required\n                                                                type='email' \n                                                                placeholder='Enter Email' \n                                                                value={email} \n                                                                onChange={(e) => setEmail(e.target.value)}\n                                                            />\n                                                        </Form.Group>\n\n\n                                                        <Button type='submit' variant='primary'> Register </Button>\n\n                                                    </Form>\n                                            </Card>\n                                        </Col>\n\n                                    </Row>\n                                )\n\n            }\n                \n        </div>\n    )\n}\n\nexport default EventView"]},"metadata":{},"sourceType":"module"}
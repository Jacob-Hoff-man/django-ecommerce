{"ast":null,"code":"import _toConsumableArray from\"/Users/jacob/Web/django-ecommerce/backend/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"/Users/jacob/Web/django-ecommerce/backend/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useEffect}from'react';import{Link,useNavigate,useParams,useSearchParams}from'react-router-dom';import{Row,Col,ListGroup,Image,Form,Button,Card}from'react-bootstrap';// react redux import for global state handling+API calls\nimport{useDispatch,useSelector}from'react-redux';import{addToCart,removeFromCart}from'../reduxState/actions/cartActions';// components\nimport Message from'../components/Message';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function CartView(_ref){var match=_ref.match,location=_ref.location;var _useParams=useParams(),id=_useParams.id;/* get quantity parameter from url */var _useSearchParams=useSearchParams(),_useSearchParams2=_slicedToArray(_useSearchParams,1),searchParams=_useSearchParams2[0];var quantity=Number(searchParams.get(\"quantity\"));var navigate=useNavigate();/* get cart data from redux state */var dispatch=useDispatch();var cart=useSelector(function(state){return state.cart;});var cartItems=cart.cartItems;/* getting userData from userLogin in redux state to ensure user is logged in */var userLoginState=useSelector(function(state){return state.userLogin;});var userData=userLoginState.userData;useEffect(function(){/* only calling dispatch when an item is added to cart (if id is present in url) */if(id){dispatch(addToCart(id,quantity));}},[dispatch,id,quantity]);var removeFromCartHandler=function removeFromCartHandler(id){dispatch(removeFromCart(id));};var checkoutHandler=function checkoutHandler(){/* redirect the user from this page if they are not logged in */if(!userData){navigate('/login');}else{/* once user is logged in, redirect to shipping view */navigate('/shipping');}};return/*#__PURE__*/_jsxs(Row,{children:[/*#__PURE__*/_jsxs(Col,{md:8,children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Shopping Cart\"}),cartItems.length===0?/*#__PURE__*/_jsxs(Message,{variant:\"info\",children:[\"Your cart is empty \",/*#__PURE__*/_jsx(Link,{to:\"/\",children:\"Return\"})]}):/*#__PURE__*/_jsx(ListGroup,{variant:\"flush\",children:cartItems.map(function(item){return/*#__PURE__*/_jsx(ListGroup.Item,{children:/*#__PURE__*/_jsxs(Row,{children:[/*#__PURE__*/_jsx(Col,{md:2,children:/*#__PURE__*/_jsx(Image,{src:item.image,alt:item.name,fluid:true,rounded:true})}),/*#__PURE__*/_jsx(Col,{md:3,children:/*#__PURE__*/_jsx(Link,{to:\"/product/\".concat(item.product),children:item.name})}),/*#__PURE__*/_jsxs(Col,{md:2,children:[\"$\",item.price]}),/*#__PURE__*/_jsx(Col,{md:3,children:/*#__PURE__*/_jsx(Form.Control,{as:\"select\",value:item.quantity,onChange:function onChange(e){return dispatch(addToCart(item.product,Number(e.target.value)));},children:_toConsumableArray(Array(item.countInStock).keys()).map(function(x){return/*#__PURE__*/_jsx(\"option\",{value:x+1,children:x+1},x+1);})})}),/*#__PURE__*/_jsx(Col,{md:1,children:/*#__PURE__*/_jsx(Button,{type:\"button\",variant:\"light\",onClick:function onClick(){return removeFromCartHandler(item.product);},children:/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-trash\"})})})]})},item.product);})})]}),/*#__PURE__*/_jsx(Col,{md:4,children:/*#__PURE__*/_jsxs(Card,{children:[/*#__PURE__*/_jsx(ListGroup,{variant:\"flush\",children:/*#__PURE__*/_jsxs(ListGroup.Item,{children:[/*#__PURE__*/_jsxs(\"h2\",{children:[\"Subtotal (\",cartItems.reduce(function(accumulator,item){return accumulator+item.quantity;},0),\" items)\"]}),\"$\",cartItems.reduce(function(accumulator,item){return accumulator+item.quantity*item.price;},0).toFixed(2)]})}),/*#__PURE__*/_jsx(ListGroup.Item,{children:/*#__PURE__*/_jsx(Button,{type:\"button\",className:\"btn-block\",disabled:cartItems.length===0,onClick:checkoutHandler,children:\"Checkout\"})})]})})]});}export default CartView;","map":{"version":3,"sources":["/Users/jacob/Web/django-ecommerce/backend/frontend/src/views/CartView.js"],"names":["React","useEffect","Link","useNavigate","useParams","useSearchParams","Row","Col","ListGroup","Image","Form","Button","Card","useDispatch","useSelector","addToCart","removeFromCart","Message","CartView","match","location","id","searchParams","quantity","Number","get","navigate","dispatch","cart","state","cartItems","userLoginState","userLogin","userData","removeFromCartHandler","checkoutHandler","length","map","item","image","name","product","price","e","target","value","Array","countInStock","keys","x","reduce","accumulator","toFixed"],"mappings":"wRAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,IAAT,CAAeC,WAAf,CAA4BC,SAA5B,CAAuCC,eAAvC,KAA8D,kBAA9D,CACA,OAASC,GAAT,CAAcC,GAAd,CAAmBC,SAAnB,CAA8BC,KAA9B,CAAqCC,IAArC,CAA2CC,MAA3C,CAAmDC,IAAnD,KAA+D,iBAA/D,CACA;AACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CACA,OAASC,SAAT,CAAoBC,cAApB,KAA0C,mCAA1C,CACA;AACA,MAAOC,CAAAA,OAAP,KAAoB,uBAApB,C,wFAEA,QAASC,CAAAA,QAAT,MAAuC,IAAnBC,CAAAA,KAAmB,MAAnBA,KAAmB,CAAZC,QAAY,MAAZA,QAAY,CACnC,eAAehB,SAAS,EAAxB,CAAQiB,EAAR,YAAQA,EAAR,CACA,qCACA,qBAAuBhB,eAAe,EAAtC,sDAAOiB,YAAP,sBACA,GAAMC,CAAAA,QAAQ,CAAGC,MAAM,CAACF,YAAY,CAACG,GAAb,CAAiB,UAAjB,CAAD,CAAvB,CAEA,GAAMC,CAAAA,QAAQ,CAAGvB,WAAW,EAA5B,CAEA,oCACA,GAAMwB,CAAAA,QAAQ,CAAGd,WAAW,EAA5B,CACA,GAAMe,CAAAA,IAAI,CAAGd,WAAW,CAAC,SAAAe,KAAK,QAAIA,CAAAA,KAAK,CAACD,IAAV,EAAN,CAAxB,CACA,GAAQE,CAAAA,SAAR,CAAsBF,IAAtB,CAAQE,SAAR,CAEA,gFACA,GAAMC,CAAAA,cAAc,CAAGjB,WAAW,CAAC,SAAAe,KAAK,QAAIA,CAAAA,KAAK,CAACG,SAAV,EAAN,CAAlC,CACA,GAAQC,CAAAA,QAAR,CAAqBF,cAArB,CAAQE,QAAR,CAGAhC,SAAS,CAAC,UAAM,CACZ,mFACA,GAAGoB,EAAH,CAAO,CACHM,QAAQ,CAACZ,SAAS,CAACM,EAAD,CAAKE,QAAL,CAAV,CAAR,CACH,CACJ,CALQ,CAKN,CAACI,QAAD,CAAWN,EAAX,CAAeE,QAAf,CALM,CAAT,CAOA,GAAMW,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,CAACb,EAAD,CAAQ,CAClCM,QAAQ,CAACX,cAAc,CAACK,EAAD,CAAf,CAAR,CACH,CAFD,CAIA,GAAMc,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAAM,CAC1B,gEACA,GAAG,CAACF,QAAJ,CAAc,CACVP,QAAQ,CAAC,QAAD,CAAR,CACH,CAFD,IAEO,CACH,uDACAA,QAAQ,CAAC,WAAD,CAAR,CACH,CACJ,CARD,CAUA,mBACI,MAAC,GAAD,yBACI,MAAC,GAAD,EAAK,EAAE,CAAE,CAAT,wBACI,qCADJ,CAGQI,SAAS,CAACM,MAAV,GAAqB,CAArB,cACI,MAAC,OAAD,EAAS,OAAO,CAAC,MAAjB,8CACuB,KAAC,IAAD,EAAM,EAAE,CAAC,GAAT,oBADvB,GADJ,cAKI,KAAC,SAAD,EAAW,OAAO,CAAC,OAAnB,UAEQN,SAAS,CAACO,GAAV,CAAc,SAAAC,IAAI,qBACd,KAAC,SAAD,CAAW,IAAX,wBACI,MAAC,GAAD,yBACI,KAAC,GAAD,EAAK,EAAE,CAAE,CAAT,uBACI,KAAC,KAAD,EAAO,GAAG,CAAEA,IAAI,CAACC,KAAjB,CAAwB,GAAG,CAAED,IAAI,CAACE,IAAlC,CAAwC,KAAK,KAA7C,CAA8C,OAAO,KAArD,EADJ,EADJ,cAKI,KAAC,GAAD,EAAK,EAAE,CAAE,CAAT,uBACI,KAAC,IAAD,EAAM,EAAE,oBAAcF,IAAI,CAACG,OAAnB,CAAR,UAAuCH,IAAI,CAACE,IAA5C,EADJ,EALJ,cASI,MAAC,GAAD,EAAK,EAAE,CAAE,CAAT,eACMF,IAAI,CAACI,KADX,GATJ,cAaI,KAAC,GAAD,EAAK,EAAE,CAAE,CAAT,uBACI,KAAC,IAAD,CAAM,OAAN,EACQ,EAAE,CAAC,QADX,CAEQ,KAAK,CAAEJ,IAAI,CAACf,QAFpB,CAGQ,QAAQ,CAAE,kBAACoB,CAAD,QAAOhB,CAAAA,QAAQ,CAACZ,SAAS,CAACuB,IAAI,CAACG,OAAN,CAAejB,MAAM,CAACmB,CAAC,CAACC,MAAF,CAASC,KAAV,CAArB,CAAV,CAAf,EAHlB,UAMQ,mBAAIC,KAAK,CAACR,IAAI,CAACS,YAAN,CAAL,CAAyBC,IAAzB,EAAJ,EAAqCX,GAArC,CAAyC,SAACY,CAAD,qBACrC,eAAoB,KAAK,CAAEA,CAAC,CAAG,CAA/B,UACKA,CAAC,CAAG,CADT,EAAaA,CAAC,CAAG,CAAjB,CADqC,EAAzC,CANR,EADJ,EAbJ,cA8BI,KAAC,GAAD,EAAK,EAAE,CAAE,CAAT,uBACI,KAAC,MAAD,EACI,IAAI,CAAC,QADT,CAEI,OAAO,CAAC,OAFZ,CAGI,OAAO,CAAE,yBAAMf,CAAAA,qBAAqB,CAACI,IAAI,CAACG,OAAN,CAA3B,EAHb,uBAKI,UAAG,SAAS,CAAC,cAAb,EALJ,EADJ,EA9BJ,GADJ,EAAqBH,IAAI,CAACG,OAA1B,CADc,EAAlB,CAFR,EARZ,GADJ,cA8DI,KAAC,GAAD,EAAK,EAAE,CAAE,CAAT,uBACI,MAAC,IAAD,yBACI,KAAC,SAAD,EAAW,OAAO,CAAC,OAAnB,uBACI,MAAC,SAAD,CAAW,IAAX,yBACI,mCAAeX,SAAS,CAACoB,MAAV,CAAiB,SAACC,WAAD,CAAcb,IAAd,QAAuBa,CAAAA,WAAW,CAAGb,IAAI,CAACf,QAA1C,EAAjB,CAAqE,CAArE,CAAf,aADJ,KAEMO,SAAS,CAACoB,MAAV,CAAiB,SAACC,WAAD,CAAcb,IAAd,QAAuBa,CAAAA,WAAW,CAAGb,IAAI,CAACf,QAAL,CAAgBe,IAAI,CAACI,KAA1D,EAAjB,CAAkF,CAAlF,EAAqFU,OAArF,CAA6F,CAA7F,CAFN,GADJ,EADJ,cAQI,KAAC,SAAD,CAAW,IAAX,wBACQ,KAAC,MAAD,EACI,IAAI,CAAC,QADT,CAEI,SAAS,CAAC,WAFd,CAGI,QAAQ,CAAEtB,SAAS,CAACM,MAAV,GAAqB,CAHnC,CAII,OAAO,CAAED,eAJb,sBADR,EARJ,GADJ,EA9DJ,GADJ,CAsFH,CAED,cAAejB,CAAAA,QAAf","sourcesContent":["import React, { useEffect } from 'react'\nimport { Link, useNavigate, useParams, useSearchParams } from 'react-router-dom'\nimport { Row, Col, ListGroup, Image, Form, Button, Card } from 'react-bootstrap'\n// react redux import for global state handling+API calls\nimport { useDispatch, useSelector } from 'react-redux'\nimport { addToCart, removeFromCart } from '../reduxState/actions/cartActions'\n// components\nimport Message from '../components/Message'\n\nfunction CartView({ match, location }) {\n    const { id } = useParams()\n    /* get quantity parameter from url */\n    const [searchParams] = useSearchParams()\n    const quantity = Number(searchParams.get(\"quantity\"))\n\n    const navigate = useNavigate()\n\n    /* get cart data from redux state */\n    const dispatch = useDispatch()\n    const cart = useSelector(state => state.cart)\n    const { cartItems } = cart\n\n    /* getting userData from userLogin in redux state to ensure user is logged in */\n    const userLoginState = useSelector(state => state.userLogin)\n    const { userData } = userLoginState\n\n\n    useEffect(() => {\n        /* only calling dispatch when an item is added to cart (if id is present in url) */\n        if(id) {\n            dispatch(addToCart(id, quantity))\n        }\n    }, [dispatch, id, quantity])\n\n    const removeFromCartHandler = (id) => {\n        dispatch(removeFromCart(id))\n    } \n\n    const checkoutHandler = () => {\n        /* redirect the user from this page if they are not logged in */\n        if(!userData) {\n            navigate('/login')\n        } else {\n            /* once user is logged in, redirect to shipping view */\n            navigate('/shipping')\n        }\n    }\n\n    return (\n        <Row>\n            <Col md={8}>\n                <h1>Shopping Cart</h1>\n                {\n                    cartItems.length === 0 ? (\n                        <Message variant='info'>\n                            Your cart is empty <Link to='/'>Return</Link>\n                        </Message>\n                    ) : (\n                        <ListGroup variant='flush' >\n                            {\n                                cartItems.map(item => (\n                                    <ListGroup.Item key={item.product}>\n                                        <Row>\n                                            <Col md={2}>\n                                                <Image src={item.image} alt={item.name} fluid rounded />\n                                            </Col>\n\n                                            <Col md={3}>\n                                                <Link to={`/product/${item.product}`}>{item.name}</Link>\n                                            </Col>\n\n                                            <Col md={2}>\n                                                ${item.price}\n                                            </Col>\n\n                                            <Col md={3}>\n                                                <Form.Control\n                                                        as=\"select\"\n                                                        value={item.quantity}\n                                                        onChange={(e) => dispatch(addToCart(item.product, Number(e.target.value)))}\n                                                >\n                                                    {\n                                                        [...Array(item.countInStock).keys()].map((x) =>(\n                                                            <option key={x + 1} value={x + 1}>\n                                                                {x + 1}\n                                                            </option>\n                                                        ))\n                                                    }\n\n                                                </Form.Control>\n                                            </Col>\n\n                                            <Col md={1}>\n                                                <Button\n                                                    type='button'\n                                                    variant='light'\n                                                    onClick={() => removeFromCartHandler(item.product)}\n                                                >\n                                                    <i className='fas fa-trash'></i>\n                                                </Button>\n                                            </Col>\n\n                                        </Row>\n                                    </ListGroup.Item>\n                                ))\n                            }\n                        </ListGroup>\n                    )\n                }\n            </Col>\n\n            <Col md={4}>\n                <Card>\n                    <ListGroup variant='flush'>\n                        <ListGroup.Item>\n                            <h2>Subtotal ({cartItems.reduce((accumulator, item) => accumulator + item.quantity, 0)} items)</h2>\n                            ${cartItems.reduce((accumulator, item) => accumulator + item.quantity * item.price, 0).toFixed(2)}\n                        </ListGroup.Item>\n                    </ListGroup>\n\n                    <ListGroup.Item>\n                            <Button\n                                type='button'\n                                className='btn-block'\n                                disabled={cartItems.length === 0}\n                                onClick={checkoutHandler}\n                            >\n                                Checkout\n                            </Button>\n                    </ListGroup.Item>\n                </Card>\n            </Col>\n        </Row>\n    )\n}\n\nexport default CartView"]},"metadata":{},"sourceType":"module"}
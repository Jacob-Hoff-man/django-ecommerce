{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n/* redux reducers */\n\nimport { productListReducer, productDetailsReducer } from './reducers/productReducers';\nimport { cartReducer } from './reducers/cartReducers';\nimport { userLoginReducer, userRegisterReducer, userDataReducer, userUpdateReducer } from './reducers/userReducers';\n/* reducer receives actions, manipulate the state, then pass state down to components */\n\nconst reducer = combineReducers({\n  productList: productListReducer,\n  productDetails: productDetailsReducer,\n  cart: cartReducer,\n  userLogin: userLoginReducer,\n  userRegister: userRegisterReducer,\n  userData: userDataReducer,\n  userUpdate: userUpda\n});\n/* if cart items exist in local storage, get and set to global state */\n\nconst cartItemsFromStorage = localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) : [];\n/* if userData exists in local storage, get and set to global state */\n\nconst UserDataFromStorage = localStorage.getItem('userData') ? JSON.parse(localStorage.getItem('userData')) : null;\n/* set the initial state values */\n\nconst initialState = {\n  cart: {\n    cartItems: cartItemsFromStorage\n  },\n  userLogin: {\n    userData: UserDataFromStorage\n  }\n};\n/* using thunk middleware to look at every action and calls instances that are functions */\n\nconst middleware = [thunk];\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store;","map":{"version":3,"sources":["/Users/jacob/Web/django-ecommerce/frontend/src/reduxState/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","productListReducer","productDetailsReducer","cartReducer","userLoginReducer","userRegisterReducer","userDataReducer","userUpdateReducer","reducer","productList","productDetails","cart","userLogin","userRegister","userData","userUpdate","userUpda","cartItemsFromStorage","localStorage","getItem","JSON","parse","UserDataFromStorage","initialState","cartItems","middleware","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,mBAAT,QAAmC,0BAAnC;AAEA;;AACA,SAASC,kBAAT,EAA6BC,qBAA7B,QAA0D,4BAA1D;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,gBAAT,EAA2BC,mBAA3B,EAAgDC,eAAhD,EAAiEC,iBAAjE,QAAyF,yBAAzF;AAEA;;AACA,MAAMC,OAAO,GAAGX,eAAe,CAAC;AAC5BY,EAAAA,WAAW,EAAER,kBADe;AAE5BS,EAAAA,cAAc,EAAER,qBAFY;AAI5BS,EAAAA,IAAI,EAAER,WAJsB;AAM5BS,EAAAA,SAAS,EAAER,gBANiB;AAO5BS,EAAAA,YAAY,EAAER,mBAPc;AAQ5BS,EAAAA,QAAQ,EAAER,eARkB;AAS5BS,EAAAA,UAAU,EAAEC;AATgB,CAAD,CAA/B;AAYA;;AACA,MAAMC,oBAAoB,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,IAAoCC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CAApC,GACqC,EADlE;AAEA;;AACA,MAAMG,mBAAmB,GAAGJ,YAAY,CAACC,OAAb,CAAqB,UAArB,IAAmCC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CAAnC,GACsC,IADlE;AAEA;;AACA,MAAMI,YAAY,GAAG;AACjBZ,EAAAA,IAAI,EAAE;AAAEa,IAAAA,SAAS,EAAEP;AAAb,GADW;AAEjBL,EAAAA,SAAS,EAAE;AAAEE,IAAAA,QAAQ,EAAEQ;AAAZ;AAFM,CAArB;AAIA;;AACA,MAAMG,UAAU,GAAG,CAAC1B,KAAD,CAAnB;AAEA,MAAM2B,KAAK,GAAG9B,WAAW,CAACY,OAAD,EAAUe,YAAV,EAAwBvB,mBAAmB,CAACF,eAAe,CAAC,GAAG2B,UAAJ,CAAhB,CAA3C,CAAzB;AAEA,eAAeC,KAAf","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools} from 'redux-devtools-extension'\n\n/* redux reducers */\nimport { productListReducer, productDetailsReducer } from './reducers/productReducers'\nimport { cartReducer } from './reducers/cartReducers'\nimport { userLoginReducer, userRegisterReducer, userDataReducer, userUpdateReducer} from './reducers/userReducers'\n\n/* reducer receives actions, manipulate the state, then pass state down to components */\nconst reducer = combineReducers({\n    productList: productListReducer,\n    productDetails: productDetailsReducer,\n\n    cart: cartReducer,\n\n    userLogin: userLoginReducer,\n    userRegister: userRegisterReducer,\n    userData: userDataReducer,\n    userUpdate: userUpda\n})\n\n/* if cart items exist in local storage, get and set to global state */\nconst cartItemsFromStorage = localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems'))\n                                                                : []\n/* if userData exists in local storage, get and set to global state */\nconst UserDataFromStorage = localStorage.getItem('userData') ? JSON.parse(localStorage.getItem('userData'))\n                                                                : null\n/* set the initial state values */\nconst initialState = { \n    cart: { cartItems: cartItemsFromStorage },\n    userLogin: { userData: UserDataFromStorage },\n}\n/* using thunk middleware to look at every action and calls instances that are functions */\nconst middleware = [thunk]\n\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)))\n\nexport default store\n"]},"metadata":{},"sourceType":"module"}
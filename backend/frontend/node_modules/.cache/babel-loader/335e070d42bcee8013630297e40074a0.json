{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n/* redux reducers */\n\nimport { productListReducer, productDetailsReducer } from './reducers/productReducers';\nimport { cartReducer } from './reducers/cartReducers';\nimport { userLoginReducer, userRegisterReducer, userDataReducer, userUpdateReducer } from './reducers/userReducers';\nimport { orderCreateReducer, orderDetailsReducer, ordersReducer } from './reducers/orderReducers';\nimport { eventDetailsReducer, raffleTicketsListReducer, raffleTicketCreateReducer } from './reducers/eventsReducers';\n/* reducer receives actions, manipulates the state, then passes state down to components */\n\nconst reducer = combineReducers({\n  productList: productListReducer,\n  productDetails: productDetailsReducer,\n  cart: cartReducer,\n  userLogin: userLoginReducer,\n  userRegister: userRegisterReducer,\n  userData: userDataReducer,\n  userUpdate: userUpdateReducer,\n  orderCreate: orderCreateReducer,\n  orderDetails: orderDetailsReducer,\n  orders: ordersReducer,\n  eventDetails: eventDetailsReducer,\n  raffleTickets: raffleTicketsListReducer,\n  raffleTicketCreate: raffleTicketCreateReducer\n});\n/* if cart items exist in local storage, get and set to global state */\n\nconst cartItemsFromStorage = localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) : [];\n/* if userData exists in local storage, get and set to global state */\n\nconst userDataFromStorage = localStorage.getItem('userData') ? JSON.parse(localStorage.getItem('userData')) : null;\n/* if shippingAddressData exists in local storage, get and set to global state */\n\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress') ? JSON.parse(localStorage.getItem('shippingAddress')) : {};\n/* set the initial state values */\n\nconst initialState = {\n  cart: {\n    cartItems: cartItemsFromStorage,\n    shippingAddress: shippingAddressFromStorage\n  },\n  userLogin: {\n    userData: userDataFromStorage\n  }\n};\n/* using thunk middleware to look at every action and calls instances that are functions */\n\nconst middleware = [thunk];\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store;","map":{"version":3,"sources":["/Users/jacob/Web/django-ecommerce/backend/frontend/src/reduxState/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","productListReducer","productDetailsReducer","cartReducer","userLoginReducer","userRegisterReducer","userDataReducer","userUpdateReducer","orderCreateReducer","orderDetailsReducer","ordersReducer","eventDetailsReducer","raffleTicketsListReducer","raffleTicketCreateReducer","reducer","productList","productDetails","cart","userLogin","userRegister","userData","userUpdate","orderCreate","orderDetails","orders","eventDetails","raffleTickets","raffleTicketCreate","cartItemsFromStorage","localStorage","getItem","JSON","parse","userDataFromStorage","shippingAddressFromStorage","initialState","cartItems","shippingAddress","middleware","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,mBAAT,QAAmC,0BAAnC;AAEA;;AACA,SAASC,kBAAT,EAA6BC,qBAA7B,QAA0D,4BAA1D;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,gBAAT,EAA2BC,mBAA3B,EAAgDC,eAAhD,EAAiEC,iBAAjE,QAA0F,yBAA1F;AACA,SAASC,kBAAT,EAA6BC,mBAA7B,EAAkDC,aAAlD,QAAsE,0BAAtE;AACA,SAASC,mBAAT,EAA8BC,wBAA9B,EAAwDC,yBAAxD,QAAyF,2BAAzF;AACA;;AACA,MAAMC,OAAO,GAAGjB,eAAe,CAAC;AAC5BkB,EAAAA,WAAW,EAAEd,kBADe;AAE5Be,EAAAA,cAAc,EAAEd,qBAFY;AAI5Be,EAAAA,IAAI,EAAEd,WAJsB;AAM5Be,EAAAA,SAAS,EAAEd,gBANiB;AAO5Be,EAAAA,YAAY,EAAEd,mBAPc;AAQ5Be,EAAAA,QAAQ,EAAEd,eARkB;AAS5Be,EAAAA,UAAU,EAAEd,iBATgB;AAW5Be,EAAAA,WAAW,EAAEd,kBAXe;AAY5Be,EAAAA,YAAY,EAAEd,mBAZc;AAa5Be,EAAAA,MAAM,EAAEd,aAboB;AAgB5Be,EAAAA,YAAY,EAAEd,mBAhBc;AAiB5Be,EAAAA,aAAa,EAAEd,wBAjBa;AAkB5Be,EAAAA,kBAAkB,EAAEd;AAlBQ,CAAD,CAA/B;AAsBA;;AACA,MAAMe,oBAAoB,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,IAAoCC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CAApC,GACqC,EADlE;AAEA;;AACA,MAAMG,mBAAmB,GAAGJ,YAAY,CAACC,OAAb,CAAqB,UAArB,IAAmCC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CAAnC,GACsC,IADlE;AAEA;;AACA,MAAMI,0BAA0B,GAAGL,YAAY,CAACC,OAAb,CAAqB,iBAArB,IAA0CC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAX,CAA1C,GAC2C,EAD9E;AAEA;;AACA,MAAMK,YAAY,GAAG;AACjBlB,EAAAA,IAAI,EAAE;AAAEmB,IAAAA,SAAS,EAAER,oBAAb;AACES,IAAAA,eAAe,EAAEH;AADnB,GADW;AAIjBhB,EAAAA,SAAS,EAAE;AAAEE,IAAAA,QAAQ,EAAEa;AAAZ;AAJM,CAArB;AAMA;;AACA,MAAMK,UAAU,GAAG,CAACvC,KAAD,CAAnB;AAEA,MAAMwC,KAAK,GAAG3C,WAAW,CAACkB,OAAD,EAAUqB,YAAV,EAAwBnC,mBAAmB,CAACF,eAAe,CAAC,GAAGwC,UAAJ,CAAhB,CAA3C,CAAzB;AAEA,eAAeC,KAAf","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools} from 'redux-devtools-extension'\n\n/* redux reducers */\nimport { productListReducer, productDetailsReducer } from './reducers/productReducers'\nimport { cartReducer } from './reducers/cartReducers'\nimport { userLoginReducer, userRegisterReducer, userDataReducer, userUpdateReducer } from './reducers/userReducers'\nimport { orderCreateReducer, orderDetailsReducer, ordersReducer} from './reducers/orderReducers'\nimport { eventDetailsReducer, raffleTicketsListReducer, raffleTicketCreateReducer } from './reducers/eventsReducers'\n/* reducer receives actions, manipulates the state, then passes state down to components */\nconst reducer = combineReducers({\n    productList: productListReducer,\n    productDetails: productDetailsReducer,\n\n    cart: cartReducer,\n\n    userLogin: userLoginReducer,\n    userRegister: userRegisterReducer,\n    userData: userDataReducer,\n    userUpdate: userUpdateReducer,\n\n    orderCreate: orderCreateReducer,\n    orderDetails: orderDetailsReducer,\n    orders: ordersReducer,\n\n    \n    eventDetails: eventDetailsReducer,\n    raffleTickets: raffleTicketsListReducer,\n    raffleTicketCreate: raffleTicketCreateReducer\n\n})\n\n/* if cart items exist in local storage, get and set to global state */\nconst cartItemsFromStorage = localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems'))\n                                                                : []\n/* if userData exists in local storage, get and set to global state */\nconst userDataFromStorage = localStorage.getItem('userData') ? JSON.parse(localStorage.getItem('userData'))\n                                                                : null\n/* if shippingAddressData exists in local storage, get and set to global state */\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress') ? JSON.parse(localStorage.getItem('shippingAddress'))\n                                                                            : {}\n/* set the initial state values */\nconst initialState = { \n    cart: { cartItems: cartItemsFromStorage,\n            shippingAddress: shippingAddressFromStorage \n        },\n    userLogin: { userData: userDataFromStorage },\n}\n/* using thunk middleware to look at every action and calls instances that are functions */\nconst middleware = [thunk]\n\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)))\n\nexport default store\n"]},"metadata":{},"sourceType":"module"}
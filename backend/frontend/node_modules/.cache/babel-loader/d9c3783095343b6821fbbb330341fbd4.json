{"ast":null,"code":"import _asyncToGenerator from\"/Users/jacob/Web/django-ecommerce/backend/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _regeneratorRuntime from\"/Users/jacob/Web/django-ecommerce/backend/frontend/node_modules/@babel/runtime/regenerator/index.js\";import axios from'axios';import{CART_ADD_ITEM,CART_REMOVE_ITEM,CART_SAVE_SHIPPING_ADDRESS,CART_SAVE_PAYMENT_METHOD}from'../constants/cartConstants';export var addToCart=function addToCart(id,quantity){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch,getState){var _yield$axios$get,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return axios.get(\"/api/products/\".concat(id));case 2:_yield$axios$get=_context.sent;data=_yield$axios$get.data;/* adds the specified id to the cart upon dispatch */dispatch({type:CART_ADD_ITEM,payload:{product:data._id,name:data.name,image:data.image,price:data.price,countInStock:data.countInStock,quantity:quantity}});/* setting cart items to local storage using getState*/localStorage.setItem('cartItems',JSON.stringify(getState().cart.cartItems));case 6:case\"end\":return _context.stop();}}},_callee);}));return function(_x,_x2){return _ref.apply(this,arguments);};}();};export var removeFromCart=function removeFromCart(id){return function(dispatch,getState){/* removes the specified id from the cart upon dispatch */dispatch({type:CART_REMOVE_ITEM,payload:id});/* setting cart items to local storage using getState*/localStorage.setItem('cartItems',JSON.stringify(getState().cart.cartItems));};};export var saveShippingAddress=function saveShippingAddress(data){return function(dispatch){/* removes the specified id from the cart upon dispatch */dispatch({type:CART_SAVE_SHIPPING_ADDRESS,payload:data});/* setting cart items to local storage using getState*/localStorage.setItem('shippingAddress',JSON.stringify(data));};};export var savePaymentMethod=function savePaymentMethod(data){return function(dispatch){/* removes the specified id from the cart upon dispatch */dispatch({type:CART_SAVE_PAYMENT_METHOD,payload:data});/* setting cart items to local storage using getState*/localStorage.setItem('paymentMethod',JSON.stringify(data));};};","map":{"version":3,"sources":["/Users/jacob/Web/django-ecommerce/backend/frontend/src/reduxState/actions/cartActions.js"],"names":["axios","CART_ADD_ITEM","CART_REMOVE_ITEM","CART_SAVE_SHIPPING_ADDRESS","CART_SAVE_PAYMENT_METHOD","addToCart","id","quantity","dispatch","getState","get","data","type","payload","product","_id","name","image","price","countInStock","localStorage","setItem","JSON","stringify","cart","cartItems","removeFromCart","saveShippingAddress","savePaymentMethod"],"mappings":"mRAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,OACIC,aADJ,CAEIC,gBAFJ,CAGIC,0BAHJ,CAIIC,wBAJJ,KAMO,4BANP,CAQA,MAAO,IAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACC,EAAD,CAAKC,QAAL,iGAAkB,iBAAOC,QAAP,CAAiBC,QAAjB,kKAElBT,CAAAA,KAAK,CAACU,GAAN,yBAA2BJ,EAA3B,EAFkB,uCAEhCK,IAFgC,kBAEhCA,IAFgC,CAIvC,qDACAH,QAAQ,CAAC,CACLI,IAAI,CAAEX,aADD,CAELY,OAAO,CAAE,CACLC,OAAO,CAAEH,IAAI,CAACI,GADT,CAELC,IAAI,CAAEL,IAAI,CAACK,IAFN,CAGLC,KAAK,CAAEN,IAAI,CAACM,KAHP,CAILC,KAAK,CAAEP,IAAI,CAACO,KAJP,CAKLC,YAAY,CAAER,IAAI,CAACQ,YALd,CAMLZ,QAAQ,CAARA,QANK,CAFJ,CAAD,CAAR,CAYA,uDACAa,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAkCC,IAAI,CAACC,SAAL,CAAed,QAAQ,GAAGe,IAAX,CAAgBC,SAA/B,CAAlC,EAlBuC,sDAAlB,oEAAlB,CAsBP,MAAO,IAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACpB,EAAD,QAAQ,UAACE,QAAD,CAAWC,QAAX,CAAwB,CAC1D,0DACAD,QAAQ,CAAC,CACLI,IAAI,CAAEV,gBADD,CAELW,OAAO,CAAEP,EAFJ,CAAD,CAAR,CAKA,uDACAc,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAkCC,IAAI,CAACC,SAAL,CAAed,QAAQ,GAAGe,IAAX,CAAgBC,SAA/B,CAAlC,EACH,CAT6B,EAAvB,CAWP,MAAO,IAAME,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAAChB,IAAD,QAAU,UAACH,QAAD,CAAc,CACvD,0DACAA,QAAQ,CAAC,CACLI,IAAI,CAAET,0BADD,CAELU,OAAO,CAAEF,IAFJ,CAAD,CAAR,CAKA,uDACAS,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAwCC,IAAI,CAACC,SAAL,CAAeZ,IAAf,CAAxC,EACH,CATkC,EAA5B,CAWP,MAAO,IAAMiB,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACjB,IAAD,QAAU,UAACH,QAAD,CAAc,CACrD,0DACAA,QAAQ,CAAC,CACLI,IAAI,CAAER,wBADD,CAELS,OAAO,CAAEF,IAFJ,CAAD,CAAR,CAKA,uDACAS,YAAY,CAACC,OAAb,CAAqB,eAArB,CAAsCC,IAAI,CAACC,SAAL,CAAeZ,IAAf,CAAtC,EACH,CATgC,EAA1B","sourcesContent":["import axios from 'axios'\n\nimport {\n    CART_ADD_ITEM,\n    CART_REMOVE_ITEM,\n    CART_SAVE_SHIPPING_ADDRESS,\n    CART_SAVE_PAYMENT_METHOD,\n\n} from '../constants/cartConstants'\n\nexport const addToCart = (id, quantity) => async (dispatch, getState) => {\n    /* get product data from product id */\n    const {data} = await axios.get(`/api/products/${id}`)\n\n    /* adds the specified id to the cart upon dispatch */\n    dispatch({\n        type: CART_ADD_ITEM,\n        payload: {\n            product: data._id,\n            name: data.name,\n            image: data.image,\n            price: data.price,\n            countInStock: data.countInStock,\n            quantity\n        }\n    })\n\n    /* setting cart items to local storage using getState*/\n    localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems))\n\n}\n\nexport const removeFromCart = (id) => (dispatch, getState) => {\n    /* removes the specified id from the cart upon dispatch */\n    dispatch({\n        type: CART_REMOVE_ITEM,\n        payload: id,\n    })\n\n    /* setting cart items to local storage using getState*/\n    localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems))\n}\n\nexport const saveShippingAddress = (data) => (dispatch) => {\n    /* removes the specified id from the cart upon dispatch */\n    dispatch({\n        type: CART_SAVE_SHIPPING_ADDRESS,\n        payload: data,\n    })\n\n    /* setting cart items to local storage using getState*/\n    localStorage.setItem('shippingAddress', JSON.stringify(data))\n}\n\nexport const savePaymentMethod = (data) => (dispatch) => {\n    /* removes the specified id from the cart upon dispatch */\n    dispatch({\n        type: CART_SAVE_PAYMENT_METHOD,\n        payload: data,\n    })\n\n    /* setting cart items to local storage using getState*/\n    localStorage.setItem('paymentMethod', JSON.stringify(data))\n}"]},"metadata":{},"sourceType":"module"}
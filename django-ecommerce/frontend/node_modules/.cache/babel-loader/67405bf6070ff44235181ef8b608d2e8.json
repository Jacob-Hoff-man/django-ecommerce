{"ast":null,"code":"var _jsxFileName = \"/Users/jacob/Web/django-ecommerce/backend/frontend/src/views/EventView.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { Form, Button, Row, Col, Table } from 'react-bootstrap';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { listEventDetails, listRaffleTickets, createRaffleTicket } from '../reduxState/actions/eventActions'; // components\n\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction EventView() {\n  _s();\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [message, setMessage] = useState('');\n  const [messageVariant, setMessageVariant] = useState('');\n  let navigate = useNavigate();\n  const dispatch = useDispatch();\n  /* getting eventDetails from redux state */\n\n  const eventDetailsState = useSelector(state => state.eventDetails);\n  console.log(eventDetailsState);\n  const {\n    loading,\n    event,\n    error\n  } = eventDetailsState; // /* getting orders from redux state */\n  // const raffleTicketsState = useSelector(state => state.raffleTickets)\n  // const { loading:loadingRaffleTickets, raffleTickets, error:errorRaffleTickets } = raffleTicketsState\n  // /* getting sucess from userUpdate in redux state to ensure that userUpdate is cleared appropriately */\n  // const raffleTicketCreateState= useSelector(state => state.raffleTicketCreate)\n  // const { success } = raffleTicketCreateState\n\n  useEffect(() => {\n    dispatch(listEventDetails('1'));\n    dispatch(listRaffleTickets(event._id));\n    console.log(eventDetailsState.event);\n    console.log(raffleTickets);\n    console.log('loading' + loading);\n    console.log('error' + error);\n  }, []);\n\n  const createRaffleTicket = e => {\n    e.preventDefault();\n    setMessage('');\n    console.log('created'); // if(password !== confirmPassword) {\n    //     setMessageVariant('warning')\n    //     setMessage('Passwords do not match.')\n    // } else if (password !== '' && password.length < 8){\n    //     setMessageVariant('warning')\n    //     setMessage('Password must be at least 8 characters long.')\n    // } else {\n    //     dispatch(updateUserData({\n    //         'id': user._id,\n    //         'name': name,\n    //         'email': email,\n    //         'password': password\n    //     }))\n    //     setMessageVariant('success')\n    //     setMessage('Your profile was successfully updated.')\n    // }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Row, {\n    children: /*#__PURE__*/_jsxDEV(Col, {\n      md: 3,\n      children: loading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }, this) : error ? /*#__PURE__*/_jsxDEV(Message, {\n        variant: \"warning\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: eventDetailsState.event.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 29\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n}\n\n_s(EventView, \"uuLv2LwrZr8HSbVu1mUFybVL5+s=\", false, function () {\n  return [useNavigate, useDispatch, useSelector];\n});\n\n_c = EventView;\nexport default EventView;\n\nvar _c;\n\n$RefreshReg$(_c, \"EventView\");","map":{"version":3,"sources":["/Users/jacob/Web/django-ecommerce/backend/frontend/src/views/EventView.js"],"names":["React","useState","useEffect","Link","useNavigate","Form","Button","Row","Col","Table","LinkContainer","useDispatch","useSelector","listEventDetails","listRaffleTickets","createRaffleTicket","Loader","Message","EventView","name","setName","email","setEmail","message","setMessage","messageVariant","setMessageVariant","navigate","dispatch","eventDetailsState","state","eventDetails","console","log","loading","event","error","_id","raffleTickets","e","preventDefault"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,WAAf,QAAiC,kBAAjC;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,GAAvB,EAA4BC,GAA5B,EAAiCC,KAAjC,QAA6C,iBAA7C;AACA,SAASC,aAAT,QAA8B,wBAA9B;AAEA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,gBAAT,EAA2BC,iBAA3B,EAA8CC,kBAA9C,QAAwE,oCAAxE,C,CAEA;;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,OAAP,MAAoB,uBAApB;;;AAEA,SAASC,SAAT,GAAqB;AAAA;;AACjB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBnB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACoB,KAAD,EAAQC,QAAR,IAAoBrB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACsB,OAAD,EAAUC,UAAV,IAAwBvB,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACwB,cAAD,EAAiBC,iBAAjB,IAAsCzB,QAAQ,CAAC,EAAD,CAApD;AAEA,MAAI0B,QAAQ,GAAGvB,WAAW,EAA1B;AACA,QAAMwB,QAAQ,GAAGjB,WAAW,EAA5B;AAEA;;AACA,QAAMkB,iBAAiB,GAAGjB,WAAW,CAACkB,KAAK,IAAIA,KAAK,CAACC,YAAhB,CAArC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,iBAAZ;AACA,QAAM;AAAEK,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA4BP,iBAAlC,CAZiB,CAcjB;AACA;AACA;AAEA;AACA;AACA;;AAEA3B,EAAAA,SAAS,CAAC,MAAM;AACZ0B,IAAAA,QAAQ,CAACf,gBAAgB,CAAC,GAAD,CAAjB,CAAR;AACAe,IAAAA,QAAQ,CAACd,iBAAiB,CAACqB,KAAK,CAACE,GAAP,CAAlB,CAAR;AAEAL,IAAAA,OAAO,CAACC,GAAR,CAAYJ,iBAAiB,CAACM,KAA9B;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYK,aAAZ;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAYC,OAAxB;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAUG,KAAtB;AACH,GARQ,EAQN,EARM,CAAT;;AAUA,QAAMrB,kBAAkB,GAAIwB,CAAD,IAAO;AAC9BA,IAAAA,CAAC,CAACC,cAAF;AACAhB,IAAAA,UAAU,CAAC,EAAD,CAAV;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAH8B,CAI9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEH,GArBD;;AAuBA,sBACI,QAAC,GAAD;AAAA,2BACI,QAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA,gBACKC,OAAO,gBACJ,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADI,GAEAE,KAAK,gBACL,QAAC,OAAD;AAAS,QAAA,OAAO,EAAC,SAAjB;AAAA,kBAA4Bb;AAA5B;AAAA;AAAA;AAAA;AAAA,cADK,gBAGD;AAAA,kBAAKM,iBAAiB,CAACM,KAAlB,CAAwBhB;AAA7B;AAAA;AAAA;AAAA;AAAA;AANhB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH;;GAtEQD,S;UAMUd,W,EACEO,W,EAGSC,W;;;KAVrBM,S;AAwET,eAAeA,SAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Link, useNavigate} from 'react-router-dom'\nimport { Form, Button, Row, Col, Table} from 'react-bootstrap'\nimport { LinkContainer } from 'react-router-bootstrap'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { listEventDetails, listRaffleTickets, createRaffleTicket } from '../reduxState/actions/eventActions'\n\n// components\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\n\nfunction EventView() {\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [message, setMessage] = useState('')\n    const [messageVariant, setMessageVariant] = useState('')\n\n    let navigate = useNavigate()\n    const dispatch = useDispatch()\n\n    /* getting eventDetails from redux state */\n    const eventDetailsState = useSelector(state => state.eventDetails)\n    console.log(eventDetailsState)\n    const { loading, event, error } = eventDetailsState\n\n    // /* getting orders from redux state */\n    // const raffleTicketsState = useSelector(state => state.raffleTickets)\n    // const { loading:loadingRaffleTickets, raffleTickets, error:errorRaffleTickets } = raffleTicketsState\n\n    // /* getting sucess from userUpdate in redux state to ensure that userUpdate is cleared appropriately */\n    // const raffleTicketCreateState= useSelector(state => state.raffleTicketCreate)\n    // const { success } = raffleTicketCreateState\n\n    useEffect(() => {\n        dispatch(listEventDetails('1'))\n        dispatch(listRaffleTickets(event._id))\n\n        console.log(eventDetailsState.event)\n        console.log(raffleTickets)\n        console.log('loading' + loading)\n        console.log('error' + error)\n    }, [])\n\n    const createRaffleTicket = (e) => {\n        e.preventDefault()\n        setMessage('')\n        console.log('created')\n        // if(password !== confirmPassword) {\n        //     setMessageVariant('warning')\n        //     setMessage('Passwords do not match.')\n        // } else if (password !== '' && password.length < 8){\n        //     setMessageVariant('warning')\n        //     setMessage('Password must be at least 8 characters long.')\n        // } else {\n        //     dispatch(updateUserData({\n        //         'id': user._id,\n        //         'name': name,\n        //         'email': email,\n        //         'password': password\n        //     }))\n        //     setMessageVariant('success')\n        //     setMessage('Your profile was successfully updated.')\n        // }\n\n    }\n\n    return (\n        <Row>\n            <Col md={3}>\n                {loading ? (\n                    <Loader />\n                    ) : error ? (\n                        <Message variant='warning'>{message}</Message>\n                        ) : (\n                            <h2>{eventDetailsState.event.name}</h2>\n                        )\n                }                    \n            </Col>\n\n        </Row>\n    )\n}\n\nexport default EventView"]},"metadata":{},"sourceType":"module"}
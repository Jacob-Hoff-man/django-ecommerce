{"ast":null,"code":"import axios from 'axios';\nimport { ORDER_CREATE_REQUEST, ORDER_CREATE_SUCCESS, ORDER_CREATE_FAIL, ORDER_DETAILS_REQUEST, ORDER_DETAILS_SUCCESS, ORDER_DETAILS_FAIL } from '../constants/orderConstants';\nimport { CART_CLEAR_ITEMS } from '../constants/cartConstants';\nexport const createOrder = order => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_CREATE_REQUEST\n    });\n    /* getting userData from global state */\n\n    const {\n      userLogin: {\n        userData\n      }\n    } = getState();\n    /* request data configuration */\n\n    const config = {\n      headers: {\n        'Content-type': 'application/json',\n        'Authorization': `Bearer ${userData.token}`\n      }\n    };\n    /* generate the post request data with axios */\n\n    const {\n      data\n    } = await axios.post(`/api/orders/add/`, order, config);\n    dispatch({\n      type: ORDER_CREATE_SUCCESS,\n      payload: data\n    });\n    /* clear the cart state */\n\n    dispatch({\n      type: CART_CLEAR_ITEMS,\n      payload: data\n    });\n    /* remove the cart data from localData */\n\n    localStorage.removeItem('cartItems');\n  } catch (err) {\n    dispatch({\n      type: ORDER_CREATE_FAIL,\n      payload: err.response && err.response.data.detail ? err.response.data.detail : err.message\n    });\n  }\n};\nexport const getOrderDetails = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_DETAILS_REQUEST\n    });\n    /* getting userData from global state */\n\n    const {\n      userLogin: {\n        userData\n      }\n    } = getState();\n    /* request data configuration */\n\n    const config = {\n      headers: {\n        'Content-type': 'application/json',\n        'Authorization': `Bearer ${userData.token}`\n      }\n    };\n    /* generate the GET request data with axios */\n\n    const {\n      data\n    } = await axios.get(`/api/orders/add/`, order, config);\n    dispatch({\n      type: ORDER_CREATE_SUCCESS,\n      payload: data\n    });\n    /* clear the cart state */\n\n    dispatch({\n      type: CART_CLEAR_ITEMS,\n      payload: data\n    });\n    /* remove the cart data from localData */\n\n    localStorage.removeItem('cartItems');\n  } catch (err) {\n    dispatch({\n      type: ORDER_CREATE_FAIL,\n      payload: err.response && err.response.data.detail ? err.response.data.detail : err.message\n    });\n  }\n};","map":{"version":3,"sources":["/Users/jacob/Web/django-ecommerce/frontend/src/reduxState/actions/orderActions.js"],"names":["axios","ORDER_CREATE_REQUEST","ORDER_CREATE_SUCCESS","ORDER_CREATE_FAIL","ORDER_DETAILS_REQUEST","ORDER_DETAILS_SUCCESS","ORDER_DETAILS_FAIL","CART_CLEAR_ITEMS","createOrder","order","dispatch","getState","type","userLogin","userData","config","headers","token","data","post","payload","localStorage","removeItem","err","response","detail","message","getOrderDetails","id","get"],"mappings":"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","sourcesContent":["import axios from 'axios'\n\nimport {\n    ORDER_CREATE_REQUEST,\n    ORDER_CREATE_SUCCESS,\n    ORDER_CREATE_FAIL,\n\n    ORDER_DETAILS_REQUEST,\n    ORDER_DETAILS_SUCCESS,\n    ORDER_DETAILS_FAIL\n} from '../constants/orderConstants'\n\nimport { CART_CLEAR_ITEMS } from '../constants/cartConstants'\n\nexport const createOrder = (order) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: ORDER_CREATE_REQUEST,\n        })\n        /* getting userData from global state */\n        const { userLogin: { userData } } = getState()\n        \n        /* request data configuration */\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                'Authorization': `Bearer ${userData.token}`\n            }\n        }\n        /* generate the post request data with axios */\n        const { data } = await axios.post(\n            `/api/orders/add/`,\n            order,\n            config\n        )\n\n        dispatch({\n            type: ORDER_CREATE_SUCCESS,\n            payload: data  \n        })\n        \n        /* clear the cart state */\n        dispatch({\n            type: CART_CLEAR_ITEMS,\n            payload: data  \n        })\n        /* remove the cart data from localData */\n        localStorage.removeItem('cartItems')\n\n    } catch (err) {\n        dispatch({\n            type:ORDER_CREATE_FAIL,\n            payload: err.response && err.response.data.detail ? err.response.data.detail : err.message\n        })\n    }\n}\n\nexport const getOrderDetails = (id) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: ORDER_DETAILS_REQUEST,\n        })\n        /* getting userData from global state */\n        const { userLogin: { userData } } = getState()\n        \n        /* request data configuration */\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                'Authorization': `Bearer ${userData.token}`\n            }\n        }\n        /* generate the GET request data with axios */\n        const { data } = await axios.get(\n            `/api/orders/add/`,\n            order,\n            config\n        )\n\n        dispatch({\n            type: ORDER_CREATE_SUCCESS,\n            payload: data  \n        })\n        \n        /* clear the cart state */\n        dispatch({\n            type: CART_CLEAR_ITEMS,\n            payload: data  \n        })\n        /* remove the cart data from localData */\n        localStorage.removeItem('cartItems')\n\n    } catch (err) {\n        dispatch({\n            type:ORDER_CREATE_FAIL,\n            payload: err.response && err.response.data.detail ? err.response.data.detail : err.message\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}
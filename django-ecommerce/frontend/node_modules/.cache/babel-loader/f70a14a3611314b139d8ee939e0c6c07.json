{"ast":null,"code":"import { CART_ADD_ITEM } from '../constants/cartConstants';\nexport const cartReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    cartItems: []\n  };\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case CART_ADD_ITEM:\n      const item = action.payload;\n      const itemExists = state.cartItems.find(x => x.product === item.product);\n      /* check if the item related to the action already exists in cartItems */\n\n      if (itemExists) {\n        /* replace the existing item with the new item (quantity adjustment) */\n        return { ...state,\n          cartItems: state.cartItems.map(x => x.product === itemExists.product ? item : x)\n        };\n      } else {\n        return { ...state,\n          cartItems: [...state.cartItems, item]\n        };\n      }\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/jacob/Web/django-ecommerce/frontend/src/reduxState/reducers/cartReducers.js"],"names":["CART_ADD_ITEM","cartReducer","state","cartItems","action","type","item","payload","itemExists","find","x","product","map"],"mappings":"AAAA,SACIA,aADJ,QAEO,4BAFP;AAIA,OAAO,MAAMC,WAAW,GAAG,YAAkC;AAAA,MAAjCC,KAAiC,uEAA3B;AAACC,IAAAA,SAAS,EAAC;AAAX,GAA2B;AAAA,MAAXC,MAAW;;AACzD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKL,aAAL;AACI,YAAMM,IAAI,GAAGF,MAAM,CAACG,OAApB;AACA,YAAMC,UAAU,GAAGN,KAAK,CAACC,SAAN,CAAgBM,IAAhB,CAAqBC,CAAC,IAAIA,CAAC,CAACC,OAAF,KAAcL,IAAI,CAACK,OAA7C,CAAnB;AACA;;AACA,UAAGH,UAAH,EAAe;AACX;AACA,eAAO,EACH,GAAGN,KADA;AAEHC,UAAAA,SAAS,EAAED,KAAK,CAACC,SAAN,CAAgBS,GAAhB,CAAoBF,CAAC,IAC5BA,CAAC,CAACC,OAAF,KAAcH,UAAU,CAACG,OAAzB,GAAmCL,IAAnC,GAA0CI,CADnC;AAFR,SAAP;AAKH,OAPD,MAOO;AACH,eAAO,EACH,GAAGR,KADA;AAEHC,UAAAA,SAAS,EAAC,CAAC,GAAGD,KAAK,CAACC,SAAV,EAAqBG,IAArB;AAFP,SAAP;AAIH;;AAEL;AACI,aAAOJ,KAAP;AApBR;AAsBH,CAvBM","sourcesContent":["import {\n    CART_ADD_ITEM,\n} from '../constants/cartConstants'\n\nexport const cartReducer = (state={cartItems:[]}, action) => {\n    switch(action.type) {\n        case CART_ADD_ITEM:\n            const item = action.payload\n            const itemExists = state.cartItems.find(x => x.product === item.product)\n            /* check if the item related to the action already exists in cartItems */\n            if(itemExists) {\n                /* replace the existing item with the new item (quantity adjustment) */\n                return {\n                    ...state,\n                    cartItems: state.cartItems.map(x => \n                        x.product === itemExists.product ? item : x)\n                }\n            } else {\n                return {\n                    ...state,\n                    cartItems:[...state.cartItems, item]\n                }\n            }\n\n        default:\n            return state\n    }\n}"]},"metadata":{},"sourceType":"module"}
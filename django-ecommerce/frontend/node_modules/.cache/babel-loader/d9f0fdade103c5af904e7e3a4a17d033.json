{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n/* reducers\nimport { productListReducer, productDetailsReducer } from './reducers/productReducers'\nimport { cartReducer } from './reducers/cartReducers'\nimport { userLoginReducer, userRegisterReducer, userDataReducer} from './reducers/userReducers'\n\n/* reducer receives actions, manipulate the state, then pass state down to components */\n\nconst reducer = combineReducers({\n  productList: productListReducer,\n  productDetails: productDetailsReducer,\n  cart: cartReducer,\n  userLogin: userLoginReducer,\n  userRegister: userRegisterReducer\n});\n/* if cart items exist in local storage, get and set to global state */\n\nconst cartItemsFromStorage = localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) : [];\n/* if userData exists in local storage, get and set to global state */\n\nconst UserDataFromStorage = localStorage.getItem('userData') ? JSON.parse(localStorage.getItem('userData')) : null;\n/* set the initial state values */\n\nconst initialState = {\n  cart: {\n    cartItems: cartItemsFromStorage\n  },\n  userLogin: {\n    userData: UserDataFromStorage\n  }\n};\n/* using thunk middleware to look at every action and calls instances that are functions */\n\nconst middleware = [thunk];\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store;","map":{"version":3,"sources":["/Users/jacob/Web/django-ecommerce/frontend/src/reduxState/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","reducer","productList","productListReducer","productDetails","productDetailsReducer","cart","cartReducer","userLogin","userLoginReducer","userRegister","userRegisterReducer","cartItemsFromStorage","localStorage","getItem","JSON","parse","UserDataFromStorage","initialState","cartItems","userData","middleware","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,mBAAT,QAAmC,0BAAnC;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,OAAO,GAAGJ,eAAe,CAAC;AAC5BK,EAAAA,WAAW,EAAEC,kBADe;AAE5BC,EAAAA,cAAc,EAAEC,qBAFY;AAG5BC,EAAAA,IAAI,EAAEC,WAHsB;AAI5BC,EAAAA,SAAS,EAAEC,gBAJiB;AAK5BC,EAAAA,YAAY,EAAEC;AALc,CAAD,CAA/B;AAQA;;AACA,MAAMC,oBAAoB,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,IAAoCC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CAApC,GACqC,EADlE;AAEA;;AACA,MAAMG,mBAAmB,GAAGJ,YAAY,CAACC,OAAb,CAAqB,UAArB,IAAmCC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CAAnC,GACsC,IADlE;AAEA;;AACA,MAAMI,YAAY,GAAG;AACjBZ,EAAAA,IAAI,EAAE;AAAEa,IAAAA,SAAS,EAAEP;AAAb,GADW;AAEjBJ,EAAAA,SAAS,EAAE;AAAEY,IAAAA,QAAQ,EAAEH;AAAZ;AAFM,CAArB;AAIA;;AACA,MAAMI,UAAU,GAAG,CAACtB,KAAD,CAAnB;AAEA,MAAMuB,KAAK,GAAG1B,WAAW,CAACK,OAAD,EAAUiB,YAAV,EAAwBlB,mBAAmB,CAACF,eAAe,CAAC,GAAGuB,UAAJ,CAAhB,CAA3C,CAAzB;AAEA,eAAeC,KAAf","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools} from 'redux-devtools-extension'\n\n/* reducers\nimport { productListReducer, productDetailsReducer } from './reducers/productReducers'\nimport { cartReducer } from './reducers/cartReducers'\nimport { userLoginReducer, userRegisterReducer, userDataReducer} from './reducers/userReducers'\n\n/* reducer receives actions, manipulate the state, then pass state down to components */\nconst reducer = combineReducers({\n    productList: productListReducer,\n    productDetails: productDetailsReducer,\n    cart: cartReducer,\n    userLogin: userLoginReducer,\n    userRegister: userRegisterReducer,\n})\n\n/* if cart items exist in local storage, get and set to global state */\nconst cartItemsFromStorage = localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems'))\n                                                                : []\n/* if userData exists in local storage, get and set to global state */\nconst UserDataFromStorage = localStorage.getItem('userData') ? JSON.parse(localStorage.getItem('userData'))\n                                                                : null\n/* set the initial state values */\nconst initialState = { \n    cart: { cartItems: cartItemsFromStorage },\n    userLogin: { userData: UserDataFromStorage },\n}\n/* using thunk middleware to look at every action and calls instances that are functions */\nconst middleware = [thunk]\n\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)))\n\nexport default store\n"]},"metadata":{},"sourceType":"module"}
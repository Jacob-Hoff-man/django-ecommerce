{"ast":null,"code":"import _toConsumableArray from\"/Users/jacob/Web/django-ecommerce/backend/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _objectSpread from\"/Users/jacob/Web/django-ecommerce/backend/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{CART_ADD_ITEM,CART_REMOVE_ITEM,CART_SAVE_SHIPPING_ADDRESS,CART_SAVE_PAYMENT_METHOD,CART_CLEAR_ITEMS}from'../constants/cartConstants';export var cartReducer=function cartReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{cartItems:[],shippingAddress:{}};var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case CART_ADD_ITEM:var item=action.payload;var itemExists=state.cartItems.find(function(x){return x.product===item.product;});/* check if the item related to the action already exists in cartItems */if(itemExists){/* replace the existing item with the new item (quantity adjustment) */ /* product is referring to product id */return _objectSpread(_objectSpread({},state),{},{cartItems:state.cartItems.map(function(x){return x.product===itemExists.product?item:x;})});}else{return _objectSpread(_objectSpread({},state),{},{cartItems:[].concat(_toConsumableArray(state.cartItems),[item])});}case CART_REMOVE_ITEM:/* filter through cartItems, only keep items with product id that != the action payload product id */return _objectSpread(_objectSpread({},state),{},{cartItems:state.cartItems.filter(function(x){return x.product!==action.payload;})});case CART_SAVE_SHIPPING_ADDRESS:/* save the entire shipping address form */return _objectSpread(_objectSpread({},state),{},{shippingAddress:action.payload});case CART_SAVE_PAYMENT_METHOD:/* save the entire payment method form */return _objectSpread(_objectSpread({},state),{},{paymentMethod:action.payload});case CART_CLEAR_ITEMS:return _objectSpread(_objectSpread({},state),{},{cartItems:[]});default:return state;}};","map":{"version":3,"sources":["/Users/jacob/Web/django-ecommerce/backend/frontend/src/reduxState/reducers/cartReducers.js"],"names":["CART_ADD_ITEM","CART_REMOVE_ITEM","CART_SAVE_SHIPPING_ADDRESS","CART_SAVE_PAYMENT_METHOD","CART_CLEAR_ITEMS","cartReducer","state","cartItems","shippingAddress","action","type","item","payload","itemExists","find","x","product","map","filter","paymentMethod"],"mappings":"uRAAA,OACIA,aADJ,CAEIC,gBAFJ,CAGIC,0BAHJ,CAIIC,wBAJJ,CAKIC,gBALJ,KAOO,4BAPP,CASA,MAAO,IAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAwD,IAAvDC,CAAAA,KAAuD,2DAAjD,CAACC,SAAS,CAAC,EAAX,CAAeC,eAAe,CAAE,EAAhC,CAAiD,IAAXC,CAAAA,MAAW,2CAC/E,OAAOA,MAAM,CAACC,IAAd,EACI,IAAKV,CAAAA,aAAL,CACI,GAAMW,CAAAA,IAAI,CAAGF,MAAM,CAACG,OAApB,CACA,GAAMC,CAAAA,UAAU,CAAGP,KAAK,CAACC,SAAN,CAAgBO,IAAhB,CAAqB,SAAAC,CAAC,QAAIA,CAAAA,CAAC,CAACC,OAAF,GAAcL,IAAI,CAACK,OAAvB,EAAtB,CAAnB,CACA,yEACA,GAAGH,UAAH,CAAe,CACX,uEADW,CAEX,wCACA,sCACOP,KADP,MAEIC,SAAS,CAAED,KAAK,CAACC,SAAN,CAAgBU,GAAhB,CAAoB,SAAAF,CAAC,QAC5BA,CAAAA,CAAC,CAACC,OAAF,GAAcH,UAAU,CAACG,OAAzB,CAAmCL,IAAnC,CAA0CI,CADd,EAArB,CAFf,GAKH,CARD,IAQO,CACH,sCACOT,KADP,MAEIC,SAAS,8BAAKD,KAAK,CAACC,SAAX,GAAsBI,IAAtB,EAFb,GAIH,CAEL,IAAKV,CAAAA,gBAAL,CACI,qGACA,sCACOK,KADP,MAEIC,SAAS,CAAED,KAAK,CAACC,SAAN,CAAgBW,MAAhB,CAAuB,SAAAH,CAAC,QAAIA,CAAAA,CAAC,CAACC,OAAF,GAAcP,MAAM,CAACG,OAAzB,EAAxB,CAFf,GAKJ,IAAKV,CAAAA,0BAAL,CACI,2CACA,sCACOI,KADP,MAEIE,eAAe,CAAEC,MAAM,CAACG,OAF5B,GAKJ,IAAKT,CAAAA,wBAAL,CACI,yCACA,sCACOG,KADP,MAEIa,aAAa,CAAEV,MAAM,CAACG,OAF1B,GAKJ,IAAKR,CAAAA,gBAAL,CACI,sCACOE,KADP,MAEIC,SAAS,CAAE,EAFf,GAKJ,QACI,MAAOD,CAAAA,KAAP,CAhDR,CAkDH,CAnDM","sourcesContent":["import {\n    CART_ADD_ITEM,\n    CART_REMOVE_ITEM,\n    CART_SAVE_SHIPPING_ADDRESS,\n    CART_SAVE_PAYMENT_METHOD,\n    CART_CLEAR_ITEMS,\n\n} from '../constants/cartConstants'\n\nexport const cartReducer = (state={cartItems:[], shippingAddress: {} }, action) => {\n    switch(action.type) {\n        case CART_ADD_ITEM:\n            const item = action.payload\n            const itemExists = state.cartItems.find(x => x.product === item.product)\n            /* check if the item related to the action already exists in cartItems */\n            if(itemExists) {\n                /* replace the existing item with the new item (quantity adjustment) */\n                /* product is referring to product id */\n                return {\n                    ...state,\n                    cartItems: state.cartItems.map(x => \n                        x.product === itemExists.product ? item : x)\n                }\n            } else {\n                return {\n                    ...state,\n                    cartItems:[...state.cartItems, item]\n                }\n            }\n\n        case CART_REMOVE_ITEM:\n            /* filter through cartItems, only keep items with product id that != the action payload product id */\n            return{\n                ...state,\n                cartItems: state.cartItems.filter(x => x.product !== action.payload)\n            }\n\n        case CART_SAVE_SHIPPING_ADDRESS:\n            /* save the entire shipping address form */\n            return{\n                ...state,\n                shippingAddress: action.payload\n            }\n        \n        case CART_SAVE_PAYMENT_METHOD:\n            /* save the entire payment method form */\n            return {\n                ...state,\n                paymentMethod: action.payload\n            }\n\n        case CART_CLEAR_ITEMS:\n            return {\n                ...state,\n                cartItems: []\n            }\n\n        default:\n            return state\n    }\n}"]},"metadata":{},"sourceType":"module"}
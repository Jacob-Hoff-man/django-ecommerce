{"ast":null,"code":"import{createStore,combineReducers,applyMiddleware}from'redux';import thunk from'redux-thunk';import{composeWithDevTools}from'redux-devtools-extension';/* redux reducers */import{productListReducer,productDetailsReducer}from'./reducers/productReducers';import{cartReducer}from'./reducers/cartReducers';import{userLoginReducer,userRegisterReducer,userDataReducer,userUpdateReducer}from'./reducers/userReducers';import{orderCreateReducer,orderDetailsReducer,ordersReducer}from'./reducers/orderReducers';import{eventsReducer,eventDetailsReducer,raffleTicketsListReducer,raffleTicketCreateReducer}from'./reducers/eventsReducers';/* reducer receives actions, manipulates the state, then passes state down to components */var reducer=combineReducers({productList:productListReducer,productDetails:productDetailsReducer,cart:cartReducer,userLogin:userLoginReducer,userRegister:userRegisterReducer,userData:userDataReducer,userUpdate:userUpdateReducer,orderCreate:orderCreateReducer,orderDetails:orderDetailsReducer,orders:ordersReducer,events:eventsReducer,eventDetails:eventDetailsReducer,raffleTickets:raffleTicketsListReducer,raffleTicketCreate:raffleTicketCreateReducer});/* if cart items exist in local storage, get and set to global state */var cartItemsFromStorage=localStorage.getItem('cartItems')?JSON.parse(localStorage.getItem('cartItems')):[];/* if userData exists in local storage, get and set to global state */var userDataFromStorage=localStorage.getItem('userData')?JSON.parse(localStorage.getItem('userData')):null;/* if shippingAddressData exists in local storage, get and set to global state */var shippingAddressFromStorage=localStorage.getItem('shippingAddress')?JSON.parse(localStorage.getItem('shippingAddress')):{};/* set the initial state values */var initialState={cart:{cartItems:cartItemsFromStorage,shippingAddress:shippingAddressFromStorage},userLogin:{userData:userDataFromStorage}};/* using thunk middleware to look at every action and calls instances that are functions */var middleware=[thunk];var store=createStore(reducer,initialState,composeWithDevTools(applyMiddleware.apply(void 0,middleware)));export default store;","map":{"version":3,"sources":["/Users/jacob/Web/django-ecommerce/backend/frontend/src/reduxState/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","productListReducer","productDetailsReducer","cartReducer","userLoginReducer","userRegisterReducer","userDataReducer","userUpdateReducer","orderCreateReducer","orderDetailsReducer","ordersReducer","eventsReducer","eventDetailsReducer","raffleTicketsListReducer","raffleTicketCreateReducer","reducer","productList","productDetails","cart","userLogin","userRegister","userData","userUpdate","orderCreate","orderDetails","orders","events","eventDetails","raffleTickets","raffleTicketCreate","cartItemsFromStorage","localStorage","getItem","JSON","parse","userDataFromStorage","shippingAddressFromStorage","initialState","cartItems","shippingAddress","middleware","store"],"mappings":"AAAA,OAASA,WAAT,CAAsBC,eAAtB,CAAuCC,eAAvC,KAA8D,OAA9D,CACA,MAAOC,CAAAA,KAAP,KAAkB,aAAlB,CACA,OAASC,mBAAT,KAAmC,0BAAnC,CAEA,oBACA,OAASC,kBAAT,CAA6BC,qBAA7B,KAA0D,4BAA1D,CACA,OAASC,WAAT,KAA4B,yBAA5B,CACA,OAASC,gBAAT,CAA2BC,mBAA3B,CAAgDC,eAAhD,CAAiEC,iBAAjE,KAA0F,yBAA1F,CACA,OAASC,kBAAT,CAA6BC,mBAA7B,CAAkDC,aAAlD,KAAsE,0BAAtE,CACA,OAASC,aAAT,CAAwBC,mBAAxB,CAA6CC,wBAA7C,CAAuEC,yBAAvE,KAAwG,2BAAxG,CACA,2FACA,GAAMC,CAAAA,OAAO,CAAGlB,eAAe,CAAC,CAC5BmB,WAAW,CAAEf,kBADe,CAE5BgB,cAAc,CAAEf,qBAFY,CAI5BgB,IAAI,CAAEf,WAJsB,CAM5BgB,SAAS,CAAEf,gBANiB,CAO5BgB,YAAY,CAAEf,mBAPc,CAQ5BgB,QAAQ,CAAEf,eARkB,CAS5BgB,UAAU,CAAEf,iBATgB,CAW5BgB,WAAW,CAAEf,kBAXe,CAY5BgB,YAAY,CAAEf,mBAZc,CAa5BgB,MAAM,CAAEf,aAboB,CAe5BgB,MAAM,CAAEf,aAfoB,CAgB5BgB,YAAY,CAAEf,mBAhBc,CAiB5BgB,aAAa,CAAEf,wBAjBa,CAkB5BgB,kBAAkB,CAAEf,yBAlBQ,CAAD,CAA/B,CAsBA,uEACA,GAAMgB,CAAAA,oBAAoB,CAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAoCC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CAApC,CACqC,EADlE,CAEA,sEACA,GAAMG,CAAAA,mBAAmB,CAAGJ,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAmCC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CAAnC,CACsC,IADlE,CAEA,iFACA,GAAMI,CAAAA,0BAA0B,CAAGL,YAAY,CAACC,OAAb,CAAqB,iBAArB,EAA0CC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAX,CAA1C,CAC2C,EAD9E,CAEA,kCACA,GAAMK,CAAAA,YAAY,CAAG,CACjBnB,IAAI,CAAE,CAAEoB,SAAS,CAAER,oBAAb,CACES,eAAe,CAAEH,0BADnB,CADW,CAIjBjB,SAAS,CAAE,CAAEE,QAAQ,CAAEc,mBAAZ,CAJM,CAArB,CAMA,2FACA,GAAMK,CAAAA,UAAU,CAAG,CAACzC,KAAD,CAAnB,CAEA,GAAM0C,CAAAA,KAAK,CAAG7C,WAAW,CAACmB,OAAD,CAAUsB,YAAV,CAAwBrC,mBAAmB,CAACF,eAAe,MAAf,QAAmB0C,UAAnB,CAAD,CAA3C,CAAzB,CAEA,cAAeC,CAAAA,KAAf","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools} from 'redux-devtools-extension'\n\n/* redux reducers */\nimport { productListReducer, productDetailsReducer } from './reducers/productReducers'\nimport { cartReducer } from './reducers/cartReducers'\nimport { userLoginReducer, userRegisterReducer, userDataReducer, userUpdateReducer } from './reducers/userReducers'\nimport { orderCreateReducer, orderDetailsReducer, ordersReducer} from './reducers/orderReducers'\nimport { eventsReducer, eventDetailsReducer, raffleTicketsListReducer, raffleTicketCreateReducer } from './reducers/eventsReducers'\n/* reducer receives actions, manipulates the state, then passes state down to components */\nconst reducer = combineReducers({\n    productList: productListReducer,\n    productDetails: productDetailsReducer,\n\n    cart: cartReducer,\n\n    userLogin: userLoginReducer,\n    userRegister: userRegisterReducer,\n    userData: userDataReducer,\n    userUpdate: userUpdateReducer,\n\n    orderCreate: orderCreateReducer,\n    orderDetails: orderDetailsReducer,\n    orders: ordersReducer,\n\n    events: eventsReducer,\n    eventDetails: eventDetailsReducer,\n    raffleTickets: raffleTicketsListReducer,\n    raffleTicketCreate: raffleTicketCreateReducer\n\n})\n\n/* if cart items exist in local storage, get and set to global state */\nconst cartItemsFromStorage = localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems'))\n                                                                : []\n/* if userData exists in local storage, get and set to global state */\nconst userDataFromStorage = localStorage.getItem('userData') ? JSON.parse(localStorage.getItem('userData'))\n                                                                : null\n/* if shippingAddressData exists in local storage, get and set to global state */\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress') ? JSON.parse(localStorage.getItem('shippingAddress'))\n                                                                            : {}\n/* set the initial state values */\nconst initialState = { \n    cart: { cartItems: cartItemsFromStorage,\n            shippingAddress: shippingAddressFromStorage \n        },\n    userLogin: { userData: userDataFromStorage }\n}\n/* using thunk middleware to look at every action and calls instances that are functions */\nconst middleware = [thunk]\n\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)))\n\nexport default store\n"]},"metadata":{},"sourceType":"module"}